{"version":3,"sources":["hooks/useAssetDefinitions.ts","hooks/useError.ts","services/AssetClassificationContractService.ts","models/ContractBase.ts","models/AssetClassificationContract.ts","hooks/useNetworkConfig.ts","components/Page/PageWrapper.tsx","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","components/Headers/index.tsx","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","components/Modal/Modal.tsx","components/Layout/TwoColumn.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","utils/index.ts","components/AssetClassification/EntityDetailDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","components/TransactionHandler/TransactionHandler.tsx","components/Popup/ErrorPopup.tsx","App.tsx","index.tsx","hooks/useAssetClassificationService.ts","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts","hooks/useWrapSendMessage.ts","services/WasmService.ts"],"names":["useAssetDefinitions","networkConfig","useNetworkConfig","service","useAssetClassificationService","useQuery","network","a","listAssetDefinitions","staleTime","Infinity","useInvalidateAssetDefinitions","queryClient","useQueryClient","useCallback","invalidateQueries","useError","error","getQueryData","data","setError","setQueryData","AssetClassificationContractService","grpcUrl","aliasName","wasmService","WasmService","PROD_GRPC_URL","contractAddress","this","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","assetDefinition","bindName","address","contractAddr","msg","AddAssetDefinition","setBindName","message","MsgExecuteContract","setMsg","Buffer","from","toJson","toString","setFundsList","setContract","setSender","txRaw","serializeBinary","txPretty","toJsonPretty","UpdateAssetDefinition","assetType","DeleteAssetDefinition","asset_type","verifier","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","ContractMsg","JSON","stringify","undefined","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","display_name","verifiers","enabled","bind_name","newDefinition","newVerifier","onboarding_cost","onboarding_denom","fee_destinations","entity_detail","name","description","home_url","source_url","newEntityDetail","newFeeDestination","fee_amount","newOnboardingCost","cost","add_asset_definition","asset_definition","update_asset_definition","delete_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","contractAlias","MAINNET_ASSET_CONTRACT_ALIAS_NAME","TESTNET_ASSET_CONTRACT_ALIAS_NAME","paramNetwork","useParams","initialNetwork","networkOrDefault","initialData","useSetNetwork","newNetwork","Body","styled","div","LIGHT_BG","Content","PageWrapper","children","useAssetClassificationConfig","getConfig","retry","useIsAdmin","walletConnectState","useWalletConnect","config","isLoading","admin","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","H6","h6","Button","button","secondary","DARK_BG","DARK_TEXT","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","ModalOverlay","TRANSPARENT_DARK_BG","ModalContainer","WHITE","CloseButton","Modal","requestClose","closeable","onClick","e","stopPropagation","TwoColumnFlex","actionColumn","Input","input","type","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","value","rest","disabled","deepReplace","item","key","split","length","Error","conditionalReplace","slice","Array","indexToReplace","map","curr","i","EntityDetailDisplay","detail","detailChanged","handleChange","onChange","target","FeeDestinationControlWrapper","FeeDestinationContentWrapper","FeeDestinationDetails","destination","destinationChanged","requestRemoval","useState","updatedDestination","setUpdatedDestination","useEffect","deepcopy","updateDestination","AssetVerifierWrapper","AssetVerifierDetails","DeleteVerifierButton","getOnboardingCost","AssetVerifier","creating","definitionDirty","v","sendMessage","useSendACContractMessage","mutateAsync","updatedVerifier","setUpdatedVerifier","dirty","setDirty","onboardingCost","setOnboardingCost","deepEqual","strict","updateVerifierField","handleUpdate","getUpdateAssetVerifierMessage","tx","handleCreate","getAddAssetVerifierMessage","title","match","exec","groups","handleCostChange","FeeDestinations","HeaderContainer","filter","_","j","retry_cost","updateOnboardingCost","subsequent_classification_detail","applicable_asset_types","style","marginTop","arr","arrayOrUndefined","alignSelf","OnboardingCostManager","updateCost","path","d","DefinitionWrapper","border","DeleteDefinitionButton","DefinitionDetails","AssetVerifiers","AssetDefinition","definition","isNonVerifierDirty","setIsNonVerifierDirty","updatedDefinition","setUpdatedDefinition","verifierToAdd","setVerifierToAdd","verifierToRemove","setVerifierToRemove","deletingAssetDefinition","setDeletingAssetDefinition","calculateIsNonVerifierDirty","original","originalDef","updateDefinitionField","sendMessageAndClearVerifier","onSuccess","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","handleDelete","getDeleteAssetDefinitionMessage","handleRemoveVerifier","clonedDefinition","checked","float","verifierIndex","requestVerifierRemoval","AssetTypeConfig","assetDefinitions","isError","addingDefinition","setAddingDefinition","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","wcs","walletConnectService","isConnected","status","disconnect","connect","devWallets","hideWallets","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checkedIcon","uncheckedIcon","TransactionHandler","currentMessage","useCurrentMessage","Overlay","ErrorPopup","closePopup","AppContent","location","useLocation","setNetwork","element","display","justifyContent","App","basename","to","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","useMemo","RICH_BLACK","CULTURED_GRAY","MSG_EXECUTE_CONTRACT_TYPE","CURRENT_MESSAGE_KEY","useMutation","result","valid","useWrapSendMessage","invalidateAssetDefinitions","Any","setTypeUrl","setValue","nameQueryClient","NameQueryClient","wasmQueryClient","WasmQueryClient","Promise","resolve","reject","QueryResolveRequest","setName","res","code","getAddress","query","queryData","smartContractState","QuerySmartContractStateRequest","setAddress","parse","getData_asU8"],"mappings":"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","file":"static/js/main.01336905.chunk.js","sourcesContent":["import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return await service.listAssetDefinitions()\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n    const networkConfig = useNetworkConfig()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries(['network', networkConfig.network, 'asset-definitions'])\n    }, [queryClient, networkConfig.network])\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport type Error = string | undefined\n\nexport const useError = (): [Error, (error?: Error) => void] => {\n    const queryClient = useQueryClient()\n    const {data: error} = useQuery(['error'], () => {\n        return queryClient.getQueryData<string>(['error'])\n    })\n\n    const setError = useCallback((error: Error) => {\n        queryClient.setQueryData(['error'], error)\n    }, [queryClient])\n\n    return [error, setError]\n}","import { MsgExecuteContract } from \"@provenanceio/wallet-utils/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { PROD_GRPC_URL } from \"../constants\"\nimport { TransactionMeta } from \"../hooks/useWrapSendMessage\"\nimport { AddAssetDefinition, AddAssetVerifier, DeleteAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n\n    constructor(grpcUrl: string, public aliasName: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetDefinition(assetDefinition)\n            .setBindName(bindName)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetDefinition(assetDefinition)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getDeleteAssetDefinitionMessage(assetType: string, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new DeleteAssetDefinition(assetType)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n}","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n\n    toJsonPretty(): string {\n        return JSON.stringify(this, undefined, 2)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        asset_type?: String\n    } = {}\n\n    constructor(asset_type: string) {\n        this.query_asset_definition.asset_type = asset_type\n    }\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name?: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        display_name: assetDefinition.display_name,\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        display_name: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    /// The Provenance Blockchain bech32 address of the verifier account.\n    address: string,\n    /// The total amount charged to use the onboarding process this this verifier.\n    onboarding_cost: string,\n    /// The coin denomination used for this onboarding process.\n    onboarding_denom: string,\n    /// Each account that should receive fees when onboarding a new scope to the contract.\n    /// All of these destinations' individual [fee_amount](super::fee_destination::FeeDestinationV2::fee_amount) properties\n    /// should sum to an amount less than or equal to the [onboarding_cost](super::verifier_detail::VerifierDetailV2::onboarding_cost).\n    /// Amounts not precisely equal in sum will cause this verifier detail to be considered invalid\n    /// and rejected in requests that include it.\n    fee_destinations: FeeDestination[],\n    /// An optional set of fields that define the verifier, including its name and home URL location.\n    entity_detail?: EntityDetail,\n    /// Defines the cost to use in place of the root onboarding_cost and fee_destinations when\n    /// retrying classification for a failed verification.  If not present, the original values\n    /// used for the first verification will be used.\n    retry_cost?: OnboardingCost,\n    /// An optional set of fields that define behaviors when classification is being run for an\n    /// asset that is already classified as a different type.\n    subsequent_classification_detail?: SubsequentClassificationDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_amount: string,\n    entity_detail?: EntityDetail,\n}\n\nexport function newFeeDestination(): FeeDestination {\n    return {\n        address: '',\n        fee_amount: ''\n    }\n}\n\nexport interface OnboardingCost {\n    /// The amount of coin to be paid when an asset is sent to the onboard_asset execute function.\n    cost: string,\n    /// Any specific fee destinations that should be sent to sources other than the selected verifier.\n    fee_destinations: FeeDestination[],\n}\n\nexport function newOnboardingCost(): OnboardingCost {\n    return {\n        cost: '',\n        fee_destinations: [],\n    }\n}\n\nexport interface SubsequentClassificationDetail {\n    /// The onboarding cost to use when classifying an asset using the associated verifier after\n    /// having already classified it as a different type with the same verifier.  If not set, the\n    /// default verifier costs are used.\n    cost?: OnboardingCost,\n    /// Specifies the asset types that an asset can be to have the subsequent classification cost\n    /// apply to them.  If an asset has been classified as any of the types in this list, the cost\n    /// will be used.  If the list is supplied as a None variant, any subsequent classifications will\n    /// use the cost.  This value will be rejected if it is supplied as an empty vector.\n    applicable_asset_types?: string[],\n}\n\nexport function newSubsequentClassificationDetail(): SubsequentClassificationDetail {\n    return {\n    }\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n        delete this.update_asset_definition.asset_definition.bind_name\n    }\n}\n\nexport class DeleteAssetDefinition extends ContractMsg {\n    delete_asset_definition: {\n        asset_type?: String,\n    } = {}\n\n    constructor(asset_type: string) {\n        super()\n        this.delete_asset_definition.asset_type = asset_type\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport type QueryAssetDefinitionsResponse = QueryAssetDefinitionResponse[]\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { MAINNET_ASSET_CONTRACT_ALIAS_NAME, NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TESTNET_ASSET_CONTRACT_ALIAS_NAME, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n    contractAlias: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n    contractAlias: network === 'mainnet' ? MAINNET_ASSET_CONTRACT_ALIAS_NAME : TESTNET_ASSET_CONTRACT_ALIAS_NAME,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity,\n        retry: false\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``\nexport const H6 = styled.h6``","import styled from \"styled-components\"\nimport { DARK_BG, DARK_TEXT, LIGHT_TEXT } from \"../../constants\"\n\nexport interface ButtonProps {\n    secondary?: boolean\n}\n\nexport const Button = styled.button<ButtonProps>`\n    padding: 10px 20px;\n    background: ${({ secondary }) => secondary ? 'transparent' : DARK_BG};\n    color: ${({ secondary }) => secondary ? DARK_TEXT : LIGHT_TEXT};\n    border: ${({ secondary }) => secondary ? `1px solid ${DARK_TEXT}` :'none'};\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n    > *:not(:last-child) {\n        margin-right: 10px;\n    }\n`","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\nimport { RemoveButton } from \"../Button\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 100;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: min(1200px, 90%);\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n    position: relative;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    font-size: 1rem;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 101;\n`\n\ninterface ModalProps {\n    closeable?: boolean,\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose, closeable = true }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {closeable && <CloseButton onClick={requestClose} />}\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: ${({ type }) => type === 'checkbox' ? 'auto': '100%'};\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable || rest.type === 'checkbox' ?\n            <Input disabled={!editable} value={value} {...rest} /> :\n            value ? <DisplayWrapper>{value}</DisplayWrapper> : <DisplayWrapper>&nbsp;</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","export function deepReplace(item: any, key: string | string[], value: any): any {\n    if (typeof key === 'string') {\n        key = key.split('.')\n    }\n\n    if (key.length === 0) {\n        throw Error('Unexpected deep replacement on index of 0 length')\n    }\n\n    if (key.length === 1) {\n        return conditionalReplace(item, key[0], value)\n    }\n\n    return conditionalReplace(item, key[0], deepReplace(item[key[0]], key.slice(1), value))\n}\n\nfunction conditionalReplace(item: any, key: string, value: any): any {\n    if (item instanceof Array) {\n        const indexToReplace = +key\n        return item.map((curr, i) => i === indexToReplace ? value : curr)\n    }\n    return {\n        ...item,\n        [key]: value\n    }\n}\n\nexport function arrayOrUndefined<T>(arr?: Array<T>): Array<T> | undefined {\n    if (arr && arr.length > 0) {\n        return arr\n    }\n    return undefined\n}","import { FunctionComponent } from \"react\";\nimport { EntityDetail, newEntityDetail } from \"../../models\"\nimport { deepReplace } from \"../../utils\";\nimport { InputOrDisplay } from \"../Input\";\n\ninterface EntityDetailProps {\n    detail?: EntityDetail,\n    editable: boolean,\n    detailChanged: (detail: EntityDetail) => any,\n}\n\nexport const EntityDetailDisplay: FunctionComponent<EntityDetailProps> = ({ detail, editable, detailChanged }) => {\n    const handleChange = (key: string, value: string) => {\n        detailChanged(deepReplace(detail || newEntityDetail(), key, value))\n    };\n\n    return <>\n        <InputOrDisplay label=\"Name\" value={detail?.name || ''} editable={editable} onChange={(e) => { handleChange('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={detail?.description || ''} editable={editable} onChange={(e) => { handleChange('description', e.target.value) }} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={detail?.home_url || ''} editable={editable} onChange={(e) => { handleChange('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={detail?.source_url || ''} editable={editable} onChange={(e) => { handleChange('source_url', e.target.value) }} />\n    </>;\n}","import deepcopy from \"deepcopy\";\nimport { FunctionComponent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FeeDestination, newEntityDetail } from \"../../models\";\nimport { deepReplace } from \"../../utils\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\";\n\nconst FeeDestinationControlWrapper = styled.div`\n    display: flex;\n    gap: 10px;\n    &:not(:last-child) {\n        padding-bottom: 25px;\n    }\n`;\n\nconst FeeDestinationContentWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n    width: 100%;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    destinationChanged: (destination: FeeDestination) => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, destinationChanged, requestRemoval }) => {\n    const [updatedDestination, setUpdatedDestination] = useState(destination);\n\n    useEffect(() => {\n        if (!destination.entity_detail) {\n            destination.entity_detail = newEntityDetail();\n        }\n        setUpdatedDestination(deepcopy(destination))\n    }, [destination])\n\n    const updateDestination = (key: string, value: any) => {\n        destinationChanged(deepReplace(updatedDestination, key, value))\n    }\n\n    return <FeeDestinationControlWrapper>\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n        <FeeDestinationContentWrapper>\n            <InputOrDisplay label=\"Address\" value={updatedDestination.address} editable={editable} onChange={(e) => { updateDestination('address', e.target.value) }} />\n            <InputOrDisplay label=\"Fee Amount\" value={updatedDestination.fee_amount} editable={editable} onChange={(e) => { updateDestination('fee_amount', e.target.value) }} />\n            <EntityDetailDisplay detail={updatedDestination.entity_detail} editable={editable} detailChanged={detail => updateDestination('entity_detail', detail)} />\n        </FeeDestinationContentWrapper>\n    </FeeDestinationControlWrapper>;\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, OnboardingCost, newOnboardingCost, newFeeDestination } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, IconButtonBody, RemoveButton } from \"../Button\"\nimport { H5, H6 } from \"../Headers\"\nimport { InputOrDisplay, InputOrDisplayWrapper } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\"\nimport { arrayOrUndefined, deepReplace } from \"../../utils\"\nimport { useSendACContractMessage } from \"../../hooks/useWrapSendMessage\"\n\nconst AssetVerifierWrapper = styled.div`\n    position: relative;\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst DeleteVerifierButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: -2px;\n    font-size: 1rem;\n    transform: translate(-50%, -50%);\n`\n\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    service: AssetClassificationContractService,\n    newDefinition?: boolean,\n    definitionDirty?: boolean,\n    requestRemoval?: () => any,\n    onChange?: (verifier: VerifierDetail) => any,\n}\n\nconst getOnboardingCost = (verifier: VerifierDetail): string => `${verifier.onboarding_cost}${verifier.onboarding_denom}`\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, newDefinition, definitionDirty, service, onChange = (v) => {}, requestRemoval = () => {} }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n    const { mutateAsync: sendMessage } = useSendACContractMessage()\n\n    const [updatedVerifier, setUpdatedVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(getOnboardingCost(verifier))\n\n    const handleChange = (newVerifier: VerifierDetail) => {\n        setUpdatedVerifier(newVerifier)\n        setDirty(!deepEqual(verifier, newVerifier, { strict: true }))\n        onChange(newVerifier)\n    }\n\n    const updateVerifierField = (key: string, value: any) => {\n        handleChange(deepReplace(updatedVerifier, key, value))\n    }\n\n    useEffect(() => {\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n        setUpdatedVerifier(deepcopy(verifier))\n        setOnboardingCost(getOnboardingCost(verifier))\n    }, [verifier])\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        const newVerifier: VerifierDetail = {\n            ...updatedVerifier,\n            onboarding_cost: (match?.groups && match.groups['cost']) || '0',\n            onboarding_denom: (match?.groups && match.groups['denom']) || ''\n        }\n        handleChange(newVerifier)\n        setOnboardingCost(getOnboardingCost(newVerifier))\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, updatedVerifier, walletConnectState.address)\n        await sendMessage({ tx: message })\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, updatedVerifier, walletConnectState.address)\n        await sendMessage({ tx: message })\n    }\n\n    const addFeeDestination = () => {\n        updateVerifierField('fee_destinations', [...updatedVerifier.fee_destinations, newFeeDestination()])\n    }\n\n    return <AssetVerifierWrapper>\n        {!creating && editable && <DeleteVerifierButton onClick={requestRemoval} title=\"Remove Asset Verifier\" />}\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={updatedVerifier.address} editable={editable} onChange={(e) => { updateVerifierField('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <EntityDetailDisplay detail={updatedVerifier.entity_detail} editable={editable} detailChanged={(detail) => updateVerifierField('entity_detail', detail)} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <HeaderContainer>\n                <H5>Fee Destinations</H5>\n                {editable && <AddButton onClick={addFeeDestination} title=\"Add Fee Destination\" />}\n            </HeaderContainer>\n            {updatedVerifier.fee_destinations.length === 0 ? 'No Fee Destinations' : updatedVerifier.fee_destinations.map((destination, i) => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} destinationChanged={destination => updateVerifierField(`fee_destinations.${i}`, destination)} requestRemoval={() => updateVerifierField('fee_destinations', updatedVerifier.fee_destinations.filter((_, j) => i !== j))} />)}\n        </FeeDestinations>\n        <FeeDestinations>\n            <OnboardingCostManager\n                onboardingCost={updatedVerifier.retry_cost}\n                editable={editable}\n                title=\"Retry Cost\"\n                updateOnboardingCost={cost => updateVerifierField('retry_cost', cost)} />\n        </FeeDestinations>\n        <FeeDestinations>\n            <OnboardingCostManager\n                onboardingCost={updatedVerifier.subsequent_classification_detail?.cost}\n                editable={editable}\n                title=\"Subsequent Classification Detail Cost\"\n                updateOnboardingCost={cost => updateVerifierField('subsequent_classification_detail.cost', cost)}\n            >\n                <HeaderContainer>\n                    <H6>Applicable Asset Types</H6>\n                    {editable && <AddButton title=\"Add Applicable Asset Type\" onClick={() => updateVerifierField('subsequent_classification_detail.applicable_asset_types', [...(updatedVerifier.subsequent_classification_detail?.applicable_asset_types || []), ''])} />}\n                </HeaderContainer>\n                {updatedVerifier.subsequent_classification_detail?.applicable_asset_types?.map((assetType, i) => <HeaderContainer key={`applicable-asset-type-${i}`}>\n                    <InputOrDisplay\n                        label=\"\"\n                        style={{marginTop: '10px'}}\n                        value={assetType}\n                        editable={editable}\n                        onChange={(e) => { updateVerifierField(`subsequent_classification_detail.applicable_asset_types.${i}`, e.target.value)}} \n                    />\n                    {editable && <RemoveButton onClick={() => updateVerifierField('subsequent_classification_detail.applicable_asset_types', arrayOrUndefined(updatedVerifier.subsequent_classification_detail?.applicable_asset_types?.filter((_, j) => i !== j)))} style={{ alignSelf: 'flex-end' }} title={`Remove Applicable Asset Type`} />}\n                </HeaderContainer>)}\n                \n            </OnboardingCostManager>\n        </FeeDestinations>\n        {!newDefinition && !creating && editable && dirty && !definitionDirty && <ActionContainer><Button onClick={handleUpdate}>Update Verifier</Button></ActionContainer>}\n        {!newDefinition && creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\ninterface OnboardingCostManagerProps {\n    onboardingCost?: OnboardingCost,\n    updateOnboardingCost: (onboardingCost: OnboardingCost | undefined) => any,\n    editable: boolean,\n    title: string,\n}\n\nconst OnboardingCostManager: FunctionComponent<OnboardingCostManagerProps> = ({ onboardingCost, updateOnboardingCost, editable, title, children }) => {\n    const updateCost = (path: string, value: any) => {\n        updateOnboardingCost(deepReplace(onboardingCost, path, value))\n    }\n\n    return <FeeDestinations>\n        <HeaderContainer>\n            <H5>{title}</H5>\n            {editable && !onboardingCost && <AddButton onClick={() => updateOnboardingCost(newOnboardingCost())} title={`Add ${title}`}/>}\n            {editable && onboardingCost && <RemoveButton onClick={() => updateOnboardingCost(undefined)} title={`Remove ${title}`}/>}\n        </HeaderContainer>\n        {onboardingCost && <>\n            <HeaderContainer>\n                <InputOrDisplay label=\"Cost\" value={onboardingCost?.cost || ''} editable={editable} onChange={(e) => { updateCost('cost', e.target.value) }} />\n                {editable && <AddButton onClick={() => updateCost('fee_destinations', [...onboardingCost.fee_destinations, newFeeDestination()])} style={{ alignSelf: 'flex-end' }} title={`Add ${title} Fee Destination`} />}\n            </HeaderContainer>\n            {children}\n            <H5>Fee Destinations</H5>\n            {!onboardingCost?.fee_destinations?.length ? 'No Fee Destinations' : onboardingCost.fee_destinations.map((destination, i) => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} destinationChanged={(d) => updateCost(`fee_destinations.${i}`, d)} requestRemoval={() => updateCost('fee_destinations', onboardingCost.fee_destinations.filter((_, j) => i !== j))} />)}\n        </>}\n    </FeeDestinations>\n}\n\nconst FeeDestinations = styled.div`\n`\n\nconst HeaderContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    > ${InputOrDisplayWrapper} {\n        flex-grow: 1;\n    }\n\n    > ${IconButtonBody} {\n        margin-left: 10px;\n    }\n`","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\nimport { deepReplace } from \"../../utils\"\nimport { useSendACContractMessage, TransactionMeta } from \"../../hooks/useWrapSendMessage\"\n\nconst DefinitionWrapper = styled.div<{ border: boolean }>`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: ${({ border }) => border && `1px solid ${DARK_BG}`};\n    position: relative;\n`\n\nconst DeleteDefinitionButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(-50%, -50%);\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    service: AssetClassificationContractService,\n}\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, service }) => {\n    const { walletConnectState } = useWalletConnect()\n    const { mutateAsync: sendMessage } = useSendACContractMessage()\n\n    const [dirty, setDirty] = useState(false)\n    const [isNonVerifierDirty, setIsNonVerifierDirty] = useState(false)\n    const [updatedDefinition, setUpdatedDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName, setBindName] = useState(true)\n    const [verifierToRemove, setVerifierToRemove] = useState<VerifierDetail>()\n    const [deletingAssetDefinition, setDeletingAssetDefinition] = useState(false)\n\n    const calculateIsNonVerifierDirty = (curr: QueryAssetDefinitionResponse, original: QueryAssetDefinitionResponse) => {\n        return !deepEqual({ ...curr, verifiers: [] }, { ...original, verifiers: [] })\n    }\n\n    useEffect(() => {\n        const originalDef = deepcopy(definition)\n        setUpdatedDefinition(originalDef)\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDef))\n    }, [definition])\n\n    const updateDefinitionField = (key: string, value: any) => {\n        const newDefinition = deepReplace(updatedDefinition, key, value)\n        setUpdatedDefinition(newDefinition)\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, newDefinition))\n        setDirty(!deepEqual(definition, newDefinition, { strict: true }))\n    }\n\n    const sendMessageAndClearVerifier = async (tx: TransactionMeta) => {\n        await sendMessage({ tx }, {\n            onSuccess: () => setVerifierToAdd(null)\n        })\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(updatedDefinition, walletConnectState.address)\n        await sendMessageAndClearVerifier(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(updatedDefinition, bindName, walletConnectState.address)\n        await sendMessageAndClearVerifier(message)\n    }\n\n    const handleDelete = async () => {\n        const message = await service.getDeleteAssetDefinitionMessage(definition.asset_type, walletConnectState.address)\n        await sendMessageAndClearVerifier(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateDefinitionField('verifiers', [...updatedDefinition.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    const requestVerifierRemoval = (verifier: VerifierDetail) => {\n        setVerifierToRemove(verifier)\n    }\n\n    const handleRemoveVerifier = async (verifier: VerifierDetail) => {\n        const clonedDefinition = deepcopy(definition)\n        clonedDefinition.verifiers = clonedDefinition.verifiers.filter(v => v.address !== verifier.address)\n        const message = await service.getUpdateAssetDefinitionMessage(clonedDefinition, walletConnectState.address)\n        await sendMessageAndClearVerifier(message)\n        setVerifierToRemove(undefined)\n        setUpdatedDefinition(clonedDefinition)\n    }\n\n    return <DefinitionWrapper border={!creating}>\n        {editable && !creating && <DeleteDefinitionButton title=\"Delete Asset Definition\" onClick={() => setDeletingAssetDefinition(true)} />}\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={updatedDefinition.asset_type} editable={creating} onChange={(e) => { updateDefinitionField('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Display Name\" value={updatedDefinition.display_name} editable={editable} onChange={(e) => { updateDefinitionField('display_name', e.target.value) }} />\n            <InputOrDisplay label=\"Enabled\" editable={editable} checked={updatedDefinition.enabled} value={`${definition.enabled}`} type=\"checkbox\" onChange={(e) => { updateDefinitionField('enabled', e.target.checked) }} />\n            {creating && <InputOrDisplay label=\"Bind Name\" editable checked={bindName} type=\"checkbox\" onChange={(e) => { setBindName(e.target.checked) }} />}\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${updatedDefinition.asset_type}`}/>}</H4>\n            {updatedDefinition.verifiers.length === 0 ? 'No Asset Verifiers' : updatedDefinition.verifiers.map((verifier, verifierIndex) => <AssetVerifier key={verifier.address}\n                asset_type={updatedDefinition.asset_type}\n                verifier={verifier}\n                editable={editable}\n                service={service}\n                newDefinition={creating}\n                definitionDirty={isNonVerifierDirty}\n                onChange={(verifier) => updateDefinitionField('verifiers', updatedDefinition.verifiers.map((v, i) => i === verifierIndex ? verifier : v))}\n                requestRemoval={() => requestVerifierRemoval(verifier)}\n            />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && isNonVerifierDirty && <ActionContainer><Button onClick={handleUpdate}>Update Definition</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={updatedDefinition.asset_type} verifier={verifierToAdd} editable creating service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n        {verifierToRemove && <Modal requestClose={() => setVerifierToRemove(undefined)}>\n            {`Are you sure you want to remove verifier for ${updatedDefinition.asset_type} with address ${verifierToRemove.address}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setVerifierToRemove(undefined)}>Cancel</Button>\n                <Button onClick={() => handleRemoveVerifier(verifierToRemove)}>Yes, Remove Verifier</Button>\n            </ActionContainer>\n        </Modal>}\n        {editable && !creating && deletingAssetDefinition && <Modal requestClose={() => setDeletingAssetDefinition(false)}>\n            {`Are you sure you want to delete the asset definition for asset type ${updatedDefinition.asset_type}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setDeletingAssetDefinition(false)}>Cancel</Button>\n                <Button onClick={handleDelete}>Yes, Delete Assset Definition</Button>\n            </ActionContainer>\n        </Modal>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useIsAdmin } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3, H4 } from \"../Headers\";\nimport { AddButton } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    // useEffect(() => {\n    //     const callback = () => {\n    //         setAddingDefinition(null)\n    //     }\n    //     wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    //     return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    // }, [wcs])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} service={service} />)}\n        {!assetDefinitions?.length && <H4>No Asset Definitions</H4>}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating service={service} /></Modal>}\n    </div>\n}\n\n","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    const isConnected = walletConnectState.status === 'connected'\n    \n    return <>\n        <Wrapper>\n            <div>\n                {isConnected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={() => isConnected ? wcs.disconnect() : wcs.connect()}>\n                {isConnected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n            devWallets={[\"figure_web\", \"figure_web_test\"]}\n            hideWallets={[\"provenance_extension\"]}\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import { FunctionComponent } from \"react\";\nimport { useCurrentMessage } from \"../../hooks/useWrapSendMessage\";\nimport { H1, H2 } from \"../Headers\";\nimport { Modal } from \"../Modal\";\n\nexport interface TransactionHandlerProps {\n    \n}\n\nexport const TransactionHandler: FunctionComponent<TransactionHandlerProps> = () => {\n    const { data: currentMessage } = useCurrentMessage()\n\n    if (!currentMessage) {\n        return <></>\n    }\n\n    return <Modal closeable={false} requestClose={() => {}}>\n        <H1 style={{ marginTop: 0 }}>Open Provenance Wallet to sign transaction</H1>\n        <H2>{currentMessage.description}</H2>\n    </Modal>\n}","import { FunctionComponent, MouseEventHandler } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\nimport { useError } from \"../../hooks\";\nimport { RemoveButton } from \"../Button\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 20px 40px;\n    min-width: 300px;\n    max-width: 90%;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    background: ${WHACKY_ACCENT_2};\n    border: 1px solid ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border-bottom: none;\n    font-weight: bold;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    position: absolute;\n    top: 1rem;\n    right: 10px;\n    font-size: 1rem;\n`\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`\n\nexport interface ErrorPopupProps {\n    \n}\n\nexport const ErrorPopup: FunctionComponent<ErrorPopupProps> = () => {\n    const [error, setError] = useError()\n\n    const closePopup: MouseEventHandler<HTMLElement> = (e) => {\n        e.stopPropagation()\n        setError()\n    }\n\n    if (!error) {\n        return <></>\n    }\n\n    return <Overlay onClick={closePopup}>\n        <Wrapper onClick={(e) => e.stopPropagation()}>\n            <CloseButton onClick={closePopup} />\n            {error}\n        </Wrapper>\n    </Overlay>\n}","import './App.css';\nimport { BrowserRouter, Navigate, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { useSetNetwork } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\nimport { TransactionHandler } from './components/TransactionHandler';\nimport { ErrorPopup } from './components/Popup';\n\nfunction App() {\n  return <WalletConnectContextProvider>\n        <BrowserRouter basename='frontend-asset-classification'>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n            <Route path=\"*\" element={<Navigate to=\"/testnet\" />} />\n          </Routes>\n        </BrowserRouter>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n      <TransactionHandler />\n      <ErrorPopup />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl, networkConfig.contractAlias)\n    }, [networkConfig])\n}","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const TESTNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const MAINNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.sc.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'\n","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\"\nimport { useMutation, useQuery, useQueryClient } from \"react-query\"\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../constants\"\nimport { useInvalidateAssetDefinitions } from \"./useAssetDefinitions\"\nimport { useError } from \"./useError\"\n\ninterface CurrentMessage {\n    message: string | string[],\n    description: string\n}\nconst CURRENT_MESSAGE_KEY = ['current-message']\nexport const useCurrentMessage = () => useQuery<CurrentMessage>(CURRENT_MESSAGE_KEY)\n\n/**\n * NOTE: sendMessage DOES ONCE AGAIN RETURN THE RESULT... LEAVING THIS HERE IN CASE THAT BREAKS AGAIN IN THE FUTURE\n * \n * Wraps the WalletConnectService sendMessage call in a promise using temporary WalletConnectService listeners, as the\n * sendMessage call does not itself wait for the result of the transaction to be returned\n * \n * @returns a promise that resolves with the broadcast result or error\n */\nexport const useWrapSendMessage = () => {\n    const { walletConnectService } = useWalletConnect()\n    const queryClient = useQueryClient()\n\n    return useMutation(async ({ message, description }: { message: string | string[], description: string }) => {\n        const currentMessage: CurrentMessage = {\n            message,\n            description\n        }\n        try {\n            queryClient.setQueryData(CURRENT_MESSAGE_KEY, currentMessage)\n            const result = await walletConnectService.sendMessage(currentMessage)\n\n            if (!result.valid) {\n                throw Error(result.error)\n            }\n    \n            return result\n        } finally {\n            queryClient.setQueryData(CURRENT_MESSAGE_KEY, undefined)\n        }\n    }\n        // new Promise<BroadcastResult>((resolve, reject) => {\n            // const listener = (res: BroadcastResult) => {\n            //     if (res.data === message) { // this is the message you are looking for\n            //         if (res.valid) {\n            //             resolve(res)\n            //         } else {\n            //             reject(res.error)\n            //         }\n\n            //         // remove own listener\n            //         walletConnectService.removeListener(WINDOW_MESSAGES.SEND_MESSAGE_COMPLETE, listener)\n            //         walletConnectService.removeListener(WINDOW_MESSAGES.SEND_MESSAGE_FAILED, listener)\n            //     }\n            // }\n            // walletConnectService.addListener(WINDOW_MESSAGES.SEND_MESSAGE_COMPLETE, listener)\n            // walletConnectService.addListener(WINDOW_MESSAGES.SEND_MESSAGE_FAILED, listener)\n        //     walletConnectService.sendMessage({\n        //         message,\n        //         description\n        //     })\n        // })\n    )\n}\n\nexport interface TransactionMeta {\n    txRaw: string,\n    txPretty: string,\n}\n\nexport const useSendACContractMessage = () => {\n    const { mutateAsync: sendMessage } = useWrapSendMessage()\n    const [, setError] = useError()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n\n    return useMutation(async ({ tx }: { tx: TransactionMeta }) => {\n        try {\n            await sendMessage({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(tx.txRaw).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n            })\n            invalidateAssetDefinitions()\n        } catch (e) {\n            setError(`Transaction Error: ${e}`)\n        }\n    }, {})\n}\n\n","import { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-utils/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-utils/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-utils/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-utils/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}"],"sourceRoot":""}