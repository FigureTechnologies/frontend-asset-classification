{"version":3,"sources":["services/WasmService.ts","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","services/AssetClassificationContractService.ts","hooks/useNetworkConfig.ts","hooks/useAssetClassificationService.ts","hooks/useAssetDefinitions.ts","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","hooks/useTransaction.ts","hooks/useError.ts","components/TransactionHandler/TransactionHandler.tsx","models/ContractBase.ts","models/AssetClassificationContract.ts","components/Headers/index.tsx","components/Page/PageWrapper.tsx","components/Layout/TwoColumn.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","utils/index.ts","components/AssetClassification/EntityDetailDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","components/Popup/ErrorPopup.tsx","App.tsx","index.tsx","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts","components/Modal/Modal.tsx"],"names":["WasmService","grpcUrl","nameQueryClient","NameQueryClient","PROD_GRPC_URL","wasmQueryClient","WasmQueryClient","this","name","Promise","resolve","reject","QueryResolveRequest","setName","error","res","Error","code","message","getAddress","contractAddress","query","queryData","Buffer","from","JSON","stringify","toString","smartContractState","QuerySmartContractStateRequest","setAddress","setQueryData","parse","getData_asU8","Button","styled","button","secondary","DARK_BG","DARK_TEXT","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","div","AssetClassificationContractService","aliasName","wasmService","a","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","assetDefinition","bindName","address","contractAddr","msg","AddAssetDefinition","setBindName","MsgExecuteContract","setMsg","toJson","setFundsList","setContract","setSender","txRaw","serializeBinary","txPretty","toJsonPretty","UpdateAssetDefinition","assetType","DeleteAssetDefinition","asset_type","verifier","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","network","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","contractAlias","MAINNET_ASSET_CONTRACT_ALIAS_NAME","TESTNET_ASSET_CONTRACT_ALIAS_NAME","useNetworkConfig","paramNetwork","useParams","initialNetwork","networkOrDefault","useQuery","staleTime","Infinity","initialData","data","useSetNetwork","queryClient","useQueryClient","useCallback","newNetwork","invalidateQueries","useAssetClassificationService","networkConfig","useMemo","useAssetDefinitions","service","listAssetDefinitions","useInvalidateAssetDefinitions","useAssetClassificationConfig","getConfig","retry","useIsAdmin","walletConnectState","useWalletConnect","config","isLoading","admin","useTransaction","transaction","getQueryData","setTransaction","undefined","useError","setError","TransactionHandler","wcs","walletConnectService","invalidateAssetDefinitions","handleTransaction","tx","customAction","Any","setTypeUrl","MSG_EXECUTE_CONTRACT_TYPE","setValue","description","method","useEffect","completeListener","addListener","WINDOW_MESSAGES","CUSTOM_ACTION_COMPLETE","failedListener","CUSTOM_ACTION_FAILED","removeListener","closeable","requestClose","style","marginTop","ContractMsg","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","display_name","verifiers","enabled","bind_name","newDefinition","newVerifier","onboarding_cost","onboarding_denom","fee_destinations","entity_detail","home_url","source_url","newEntityDetail","newFeeDestination","fee_amount","newOnboardingCost","cost","add_asset_definition","asset_definition","update_asset_definition","delete_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","H6","h6","Body","LIGHT_BG","Content","PageWrapper","children","TwoColumnFlex","actionColumn","Input","input","type","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","value","rest","disabled","deepReplace","item","key","split","length","conditionalReplace","slice","Array","indexToReplace","map","curr","i","EntityDetailDisplay","detail","detailChanged","handleChange","onChange","e","target","FeeDestinationControlWrapper","FeeDestinationContentWrapper","FeeDestinationDetails","destination","destinationChanged","requestRemoval","useState","updatedDestination","setUpdatedDestination","deepcopy","updateDestination","onClick","AssetVerifierWrapper","AssetVerifierDetails","DeleteVerifierButton","getOnboardingCost","AssetVerifier","creating","definitionDirty","updatedVerifier","setUpdatedVerifier","dirty","setDirty","onboardingCost","setOnboardingCost","deepEqual","strict","updateVerifierField","handleUpdate","getUpdateAssetVerifierMessage","handleCreate","getAddAssetVerifierMessage","title","match","exec","groups","handleCostChange","FeeDestinations","HeaderContainer","filter","_","j","retry_cost","updateOnboardingCost","subsequent_classification_detail","applicable_asset_types","arr","arrayOrUndefined","alignSelf","OnboardingCostManager","updateCost","path","d","DefinitionWrapper","WHITE","border","DeleteDefinitionButton","DefinitionDetails","AssetVerifiers","AssetDefinition","definition","isNonVerifierDirty","setIsNonVerifierDirty","updatedDefinition","setUpdatedDefinition","verifierToAdd","setVerifierToAdd","verifierToRemove","setVerifierToRemove","deletingAssetDefinition","setDeletingAssetDefinition","calculateIsNonVerifierDirty","original","originalDef","callback","updateDefinitionField","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","handleDelete","getDeleteAssetDefinitionMessage","handleRemoveVerifier","clonedDefinition","v","checked","float","requestVerifierRemoval","Modal","AssetTypeConfig","assetDefinitions","isError","addingDefinition","setAddingDefinition","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","connected","disconnect","connect","devWallets","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checkedIcon","uncheckedIcon","CloseButton","Overlay","ErrorPopup","closePopup","stopPropagation","AppContent","location","useLocation","setNetwork","element","display","justifyContent","App","grpcServiceAddress","basename","to","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","RICH_BLACK","CULTURED_GRAY","TRANSPARENT_DARK_BG","ModalOverlay","ModalContainer"],"mappings":"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","file":"static/js/main.91f2b839.chunk.js","sourcesContent":["import { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}","import styled from \"styled-components\"\nimport { DARK_BG, DARK_TEXT, LIGHT_TEXT } from \"../../constants\"\n\nexport interface ButtonProps {\n    secondary?: boolean\n}\n\nexport const Button = styled.button<ButtonProps>`\n    padding: 10px 20px;\n    background: ${({ secondary }) => secondary ? 'transparent' : DARK_BG};\n    color: ${({ secondary }) => secondary ? DARK_TEXT : LIGHT_TEXT};\n    border: ${({ secondary }) => secondary ? `1px solid ${DARK_TEXT}` :'none'};\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n    > *:not(:last-child) {\n        margin-right: 10px;\n    }\n`","import { MsgExecuteContract } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { PROD_GRPC_URL } from \"../constants\"\nimport { TransactionMeta } from \"../hooks\"\nimport { AddAssetDefinition, AddAssetVerifier, DeleteAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n\n    constructor(grpcUrl: string, public aliasName: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetDefinition(assetDefinition)\n            .setBindName(bindName)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetDefinition(assetDefinition)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getDeleteAssetDefinitionMessage(assetType: string, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new DeleteAssetDefinition(assetType)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { MAINNET_ASSET_CONTRACT_ALIAS_NAME, NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TESTNET_ASSET_CONTRACT_ALIAS_NAME, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n    contractAlias: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n    contractAlias: network === 'mainnet' ? MAINNET_ASSET_CONTRACT_ALIAS_NAME : TESTNET_ASSET_CONTRACT_ALIAS_NAME,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl, networkConfig.contractAlias)\n    }, [networkConfig])\n}","import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return await service.listAssetDefinitions()\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n    const networkConfig = useNetworkConfig()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries(['network', networkConfig.network, 'asset-definitions'])\n    }, [queryClient, networkConfig.network])\n}","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity,\n        retry: false\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport interface TransactionMeta {\n    txRaw: string,\n    txPretty: string,\n}\n\nexport const useTransaction = (): [TransactionMeta | undefined, (tx?: TransactionMeta | undefined) => void] => {\n    const queryClient = useQueryClient()\n    const { data: transaction } = useQuery(['transaction'], () => {\n        return queryClient.getQueryData<TransactionMeta>(['transaction'])\n    })\n\n    const setTransaction = useCallback((transaction: TransactionMeta | undefined = undefined) => {\n        queryClient.setQueryData(['transaction'], transaction)\n    }, [queryClient])\n\n    return [transaction, setTransaction]\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport type Error = string | undefined\n\nexport const useError = (): [Error, (error?: Error) => void] => {\n    const queryClient = useQueryClient()\n    const {data: error} = useQuery(['error'], () => {\n        return queryClient.getQueryData<string>(['error'])\n    })\n\n    const setError = useCallback((error: Error) => {\n        queryClient.setQueryData(['error'], error)\n    }, [queryClient])\n\n    return [error, setError]\n}","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\nimport { BroadcastResults } from \"@provenanceio/walletconnect-js/lib/types\";\nimport { BaseResults } from \"@provenanceio/walletconnect-js/lib/types/BaseResults\";\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\";\nimport { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../../constants\";\nimport { useError, useInvalidateAssetDefinitions, useTransaction } from \"../../hooks\";\nimport { H1, H2 } from \"../Headers\";\nimport { Modal } from \"../Modal\";\n\nexport interface TransactionHandlerProps {\n    \n}\n\nexport const TransactionHandler: FunctionComponent<TransactionHandlerProps> = () => {\n    const [transaction, setTransaction] = useTransaction()\n    const [, setError] = useError()\n    const { walletConnectService: wcs } = useWalletConnect()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n\n    const handleTransaction = useCallback(async (tx: string) => {\n        try {\n            await wcs.customAction({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(tx).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n                method: 'provenance_sendTransaction',\n            })\n        } catch (e) {\n    \n        }\n    }, [wcs])\n\n    // todo: listeners to close\n\n    useEffect(() => {\n        if (transaction) {\n            handleTransaction(transaction.txRaw)\n        }\n    }, [transaction, handleTransaction])\n\n    useEffect(() => {\n        const completeListener = (res: BroadcastResults) => {\n            setTransaction()\n            invalidateAssetDefinitions()\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n        const failedListener = (res: BroadcastResults) => {\n            setTransaction()\n            setError(`Transaction Error: ${(res as BaseResults).error}`)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        return () => {\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        }\n    }, [setTransaction, wcs, setError, invalidateAssetDefinitions])\n\n    if (!transaction) {\n        return <></>\n    }\n\n    return <Modal closeable={false} requestClose={() => {}}>\n        <H1 style={{ marginTop: 0 }}>Open Provenance Wallet to sign transaction</H1>\n        <H2>Transaction Message</H2>\n        <pre>\n            {transaction.txPretty}\n        </pre>\n    </Modal>\n}","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n\n    toJsonPretty(): string {\n        return JSON.stringify(this, undefined, 2)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        asset_type?: String\n    } = {}\n\n    constructor(asset_type: string) {\n        this.query_asset_definition.asset_type = asset_type\n    }\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name?: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        display_name: assetDefinition.display_name,\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        display_name: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    /// The Provenance Blockchain bech32 address of the verifier account.\n    address: string,\n    /// The total amount charged to use the onboarding process this this verifier.\n    onboarding_cost: string,\n    /// The coin denomination used for this onboarding process.\n    onboarding_denom: string,\n    /// Each account that should receive fees when onboarding a new scope to the contract.\n    /// All of these destinations' individual [fee_amount](super::fee_destination::FeeDestinationV2::fee_amount) properties\n    /// should sum to an amount less than or equal to the [onboarding_cost](super::verifier_detail::VerifierDetailV2::onboarding_cost).\n    /// Amounts not precisely equal in sum will cause this verifier detail to be considered invalid\n    /// and rejected in requests that include it.\n    fee_destinations: FeeDestination[],\n    /// An optional set of fields that define the verifier, including its name and home URL location.\n    entity_detail?: EntityDetail,\n    /// Defines the cost to use in place of the root onboarding_cost and fee_destinations when\n    /// retrying classification for a failed verification.  If not present, the original values\n    /// used for the first verification will be used.\n    retry_cost?: OnboardingCost,\n    /// An optional set of fields that define behaviors when classification is being run for an\n    /// asset that is already classified as a different type.\n    subsequent_classification_detail?: SubsequentClassificationDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_amount: string,\n    entity_detail?: EntityDetail,\n}\n\nexport function newFeeDestination(): FeeDestination {\n    return {\n        address: '',\n        fee_amount: ''\n    }\n}\n\nexport interface OnboardingCost {\n    /// The amount of coin to be paid when an asset is sent to the onboard_asset execute function.\n    cost: string,\n    /// Any specific fee destinations that should be sent to sources other than the selected verifier.\n    fee_destinations: FeeDestination[],\n}\n\nexport function newOnboardingCost(): OnboardingCost {\n    return {\n        cost: '',\n        fee_destinations: [],\n    }\n}\n\nexport interface SubsequentClassificationDetail {\n    /// The onboarding cost to use when classifying an asset using the associated verifier after\n    /// having already classified it as a different type with the same verifier.  If not set, the\n    /// default verifier costs are used.\n    cost?: OnboardingCost,\n    /// Specifies the asset types that an asset can be to have the subsequent classification cost\n    /// apply to them.  If an asset has been classified as any of the types in this list, the cost\n    /// will be used.  If the list is supplied as a None variant, any subsequent classifications will\n    /// use the cost.  This value will be rejected if it is supplied as an empty vector.\n    applicable_asset_types?: string[],\n}\n\nexport function newSubsequentClassificationDetail(): SubsequentClassificationDetail {\n    return {\n    }\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n        delete this.update_asset_definition.asset_definition.bind_name\n    }\n}\n\nexport class DeleteAssetDefinition extends ContractMsg {\n    delete_asset_definition: {\n        asset_type?: String,\n    } = {}\n\n    constructor(asset_type: string) {\n        super()\n        this.delete_asset_definition.asset_type = asset_type\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport type QueryAssetDefinitionsResponse = QueryAssetDefinitionResponse[]\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``\nexport const H6 = styled.h6``","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: ${({ type }) => type === 'checkbox' ? 'auto': '100%'};\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable || rest.type === 'checkbox' ?\n            <Input disabled={!editable} value={value} {...rest} /> :\n            value ? <DisplayWrapper>{value}</DisplayWrapper> : <DisplayWrapper>&nbsp;</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","export function deepReplace(item: any, key: string | string[], value: any): any {\n    if (typeof key === 'string') {\n        key = key.split('.')\n    }\n\n    if (key.length === 0) {\n        throw Error('Unexpected deep replacement on index of 0 length')\n    }\n\n    if (key.length === 1) {\n        return conditionalReplace(item, key[0], value)\n    }\n\n    return conditionalReplace(item, key[0], deepReplace(item[key[0]], key.slice(1), value))\n}\n\nfunction conditionalReplace(item: any, key: string, value: any): any {\n    if (item instanceof Array) {\n        const indexToReplace = +key\n        return item.map((curr, i) => i === indexToReplace ? value : curr)\n    }\n    return {\n        ...item,\n        [key]: value\n    }\n}\n\nexport function arrayOrUndefined<T>(arr?: Array<T>): Array<T> | undefined {\n    if (arr && arr.length > 0) {\n        return arr\n    }\n    return undefined\n}","import { FunctionComponent } from \"react\";\nimport { EntityDetail, newEntityDetail } from \"../../models\"\nimport { deepReplace } from \"../../utils\";\nimport { InputOrDisplay } from \"../Input\";\n\ninterface EntityDetailProps {\n    detail?: EntityDetail,\n    editable: boolean,\n    detailChanged: (detail: EntityDetail) => any,\n}\n\nexport const EntityDetailDisplay: FunctionComponent<EntityDetailProps> = ({ detail, editable, detailChanged }) => {\n    const handleChange = (key: string, value: string) => {\n        detailChanged(deepReplace(detail || newEntityDetail(), key, value))\n    };\n\n    return <>\n        <InputOrDisplay label=\"Name\" value={detail?.name || ''} editable={editable} onChange={(e) => { handleChange('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={detail?.description || ''} editable={editable} onChange={(e) => { handleChange('description', e.target.value) }} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={detail?.home_url || ''} editable={editable} onChange={(e) => { handleChange('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={detail?.source_url || ''} editable={editable} onChange={(e) => { handleChange('source_url', e.target.value) }} />\n    </>;\n}","import deepcopy from \"deepcopy\";\nimport { FunctionComponent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FeeDestination, newEntityDetail } from \"../../models\";\nimport { deepReplace } from \"../../utils\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\";\n\nconst FeeDestinationControlWrapper = styled.div`\n    display: flex;\n    gap: 10px;\n    &:not(:last-child) {\n        padding-bottom: 25px;\n    }\n`;\n\nconst FeeDestinationContentWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n    width: 100%;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    destinationChanged: (destination: FeeDestination) => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, destinationChanged, requestRemoval }) => {\n    const [updatedDestination, setUpdatedDestination] = useState(destination);\n\n    useEffect(() => {\n        if (!destination.entity_detail) {\n            destination.entity_detail = newEntityDetail();\n        }\n        setUpdatedDestination(deepcopy(destination))\n    }, [destination])\n\n    const updateDestination = (key: string, value: any) => {\n        destinationChanged(deepReplace(updatedDestination, key, value))\n    }\n\n    return <FeeDestinationControlWrapper>\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n        <FeeDestinationContentWrapper>\n            <InputOrDisplay label=\"Address\" value={updatedDestination.address} editable={editable} onChange={(e) => { updateDestination('address', e.target.value) }} />\n            <InputOrDisplay label=\"Fee Amount\" value={updatedDestination.fee_amount} editable={editable} onChange={(e) => { updateDestination('fee_amount', e.target.value) }} />\n            <EntityDetailDisplay detail={updatedDestination.entity_detail} editable={editable} detailChanged={detail => updateDestination('entity_detail', detail)} />\n        </FeeDestinationContentWrapper>\n    </FeeDestinationControlWrapper>;\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, OnboardingCost, newOnboardingCost, newFeeDestination } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, IconButtonBody, RemoveButton } from \"../Button\"\nimport { H5, H6 } from \"../Headers\"\nimport { InputOrDisplay, InputOrDisplayWrapper } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\"\nimport { arrayOrUndefined, deepReplace } from \"../../utils\"\n\nconst AssetVerifierWrapper = styled.div`\n    position: relative;\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst DeleteVerifierButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: -2px;\n    font-size: 1rem;\n    transform: translate(-50%, -50%);\n`\n\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    service: AssetClassificationContractService,\n    newDefinition?: boolean,\n    definitionDirty?: boolean,\n    requestRemoval?: () => any,\n    onChange?: (verifier: VerifierDetail) => any,\n}\n\nconst getOnboardingCost = (verifier: VerifierDetail): string => `${verifier.onboarding_cost}${verifier.onboarding_denom}`\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, newDefinition, definitionDirty, service, onChange = (v) => {}, requestRemoval = () => {} }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n    const [updatedVerifier, setUpdatedVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(getOnboardingCost(verifier))\n\n    const handleChange = (newVerifier: VerifierDetail) => {\n        setUpdatedVerifier(newVerifier)\n        setDirty(!deepEqual(verifier, newVerifier, { strict: true }))\n    }\n\n    const updateVerifierField = (key: string, value: any) => {\n        handleChange(deepReplace(updatedVerifier, key, value))\n    }\n\n    useEffect(() => {\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n        setUpdatedVerifier(deepcopy(verifier))\n        setOnboardingCost(getOnboardingCost(verifier))\n    }, [verifier])\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        const newVerifier: VerifierDetail = {\n            ...updatedVerifier,\n            onboarding_cost: (match?.groups && match.groups['cost']) || '0',\n            onboarding_denom: (match?.groups && match.groups['denom']) || ''\n        }\n        handleChange(newVerifier)\n        setOnboardingCost(getOnboardingCost(newVerifier))\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, updatedVerifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, updatedVerifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const addFeeDestination = () => {\n        updateVerifierField('fee_destinations', [...updatedVerifier.fee_destinations, newFeeDestination()])\n    }\n\n    return <AssetVerifierWrapper>\n        {!creating && editable && <DeleteVerifierButton onClick={requestRemoval} title=\"Remove Asset Verifier\" />}\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={updatedVerifier.address} editable={editable} onChange={(e) => { updateVerifierField('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <EntityDetailDisplay detail={updatedVerifier.entity_detail} editable={editable} detailChanged={(detail) => updateVerifierField('entity_detail', detail)} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <HeaderContainer>\n                <H5>Fee Destinations</H5>\n                {editable && <AddButton onClick={addFeeDestination} title=\"Add Fee Destination\" />}\n            </HeaderContainer>\n            {updatedVerifier.fee_destinations.length === 0 ? 'No Fee Destinations' : updatedVerifier.fee_destinations.map((destination, i) => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} destinationChanged={destination => updateVerifierField(`fee_destinations.${i}`, destination)} requestRemoval={() => updateVerifierField('fee_destinations', updatedVerifier.fee_destinations.filter((_, j) => i !== j))} />)}\n        </FeeDestinations>\n        <FeeDestinations>\n            <OnboardingCostManager\n                onboardingCost={updatedVerifier.retry_cost}\n                editable={editable}\n                title=\"Retry Cost\"\n                updateOnboardingCost={cost => updateVerifierField('retry_cost', cost)} />\n        </FeeDestinations>\n        <FeeDestinations>\n            <OnboardingCostManager\n                onboardingCost={updatedVerifier.subsequent_classification_detail?.cost}\n                editable={editable}\n                title=\"Subsequent Classification Detail Cost\"\n                updateOnboardingCost={cost => updateVerifierField('subsequent_classification_detail.cost', cost)}\n            >\n                <HeaderContainer>\n                    <H6>Applicable Asset Types</H6>\n                    {editable && <AddButton title=\"Add Applicable Asset Type\" onClick={() => updateVerifierField('subsequent_classification_detail.applicable_asset_types', [...(updatedVerifier.subsequent_classification_detail?.applicable_asset_types || []), ''])} />}\n                </HeaderContainer>\n                {updatedVerifier.subsequent_classification_detail?.applicable_asset_types?.map((assetType, i) => <HeaderContainer key={`applicable-asset-type-${i}`}>\n                    <InputOrDisplay\n                        label=\"\"\n                        style={{marginTop: '10px'}}\n                        value={assetType}\n                        editable={editable}\n                        onChange={(e) => { updateVerifierField(`subsequent_classification_detail.applicable_asset_types.${i}`, e.target.value)}} \n                    />\n                    {editable && <RemoveButton onClick={() => updateVerifierField('subsequent_classification_detail.applicable_asset_types', arrayOrUndefined(updatedVerifier.subsequent_classification_detail?.applicable_asset_types?.filter((_, j) => i !== j)))} style={{ alignSelf: 'flex-end' }} title={`Remove Applicable Asset Type`} />}\n                </HeaderContainer>)}\n                \n            </OnboardingCostManager>\n        </FeeDestinations>\n        {!newDefinition && !creating && editable && dirty && !definitionDirty && <ActionContainer><Button onClick={handleUpdate}>Update Verifier</Button></ActionContainer>}\n        {!newDefinition && creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\ninterface OnboardingCostManagerProps {\n    onboardingCost?: OnboardingCost,\n    updateOnboardingCost: (onboardingCost: OnboardingCost | undefined) => any,\n    editable: boolean,\n    title: string,\n}\n\nconst OnboardingCostManager: FunctionComponent<OnboardingCostManagerProps> = ({ onboardingCost, updateOnboardingCost, editable, title, children }) => {\n    const updateCost = (path: string, value: any) => {\n        updateOnboardingCost(deepReplace(onboardingCost, path, value))\n    }\n\n    return <FeeDestinations>\n        <HeaderContainer>\n            <H5>{title}</H5>\n            {editable && !onboardingCost && <AddButton onClick={() => updateOnboardingCost(newOnboardingCost())} title={`Add ${title}`}/>}\n            {editable && onboardingCost && <RemoveButton onClick={() => updateOnboardingCost(undefined)} title={`Remove ${title}`}/>}\n        </HeaderContainer>\n        {onboardingCost && <>\n            <HeaderContainer>\n                <InputOrDisplay label=\"Cost\" value={onboardingCost?.cost || ''} editable={editable} onChange={(e) => { updateCost('cost', e.target.value) }} />\n                {editable && <AddButton onClick={() => updateCost('fee_destinations', [...onboardingCost.fee_destinations, newFeeDestination()])} style={{ alignSelf: 'flex-end' }} title={`Add ${title} Fee Destination`} />}\n            </HeaderContainer>\n            {children}\n            <H5>Fee Destinations</H5>\n            {!onboardingCost?.fee_destinations?.length ? 'No Fee Destinations' : onboardingCost.fee_destinations.map((destination, i) => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} destinationChanged={(d) => updateCost(`fee_destinations.${i}`, d)} requestRemoval={() => updateCost('fee_destinations', onboardingCost.fee_destinations.filter((_, j) => i !== j))} />)}\n        </>}\n    </FeeDestinations>\n}\n\nconst FeeDestinations = styled.div`\n`\n\nconst HeaderContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    > ${InputOrDisplayWrapper} {\n        flex-grow: 1;\n    }\n\n    > ${IconButtonBody} {\n        margin-left: 10px;\n    }\n`","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\nimport { deepReplace } from \"../../utils\"\n\nconst DefinitionWrapper = styled.div<{ border: boolean }>`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: ${({ border }) => border && `1px solid ${DARK_BG}`};\n    position: relative;\n`\n\nconst DeleteDefinitionButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(-50%, -50%);\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    service: AssetClassificationContractService,\n}\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, service }) => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n    const [dirty, setDirty] = useState(false)\n    const [isNonVerifierDirty, setIsNonVerifierDirty] = useState(false)\n    const [updatedDefinition, setUpdatedDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName, setBindName] = useState(true)\n    const [verifierToRemove, setVerifierToRemove] = useState<VerifierDetail>()\n    const [deletingAssetDefinition, setDeletingAssetDefinition] = useState(false)\n\n    const calculateIsNonVerifierDirty = (curr: QueryAssetDefinitionResponse, original: QueryAssetDefinitionResponse) => {\n        return !deepEqual({ ...curr, verifiers: [] }, { ...original, verifiers: [] })\n    }\n\n    useEffect(() => {\n        const originalDef = deepcopy(definition)\n        setUpdatedDefinition(originalDef)\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDef))\n    }, [definition])\n\n    useEffect(() => {\n        const callback = () => {\n            setVerifierToAdd(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const updateDefinitionField = (key: string, value: any) => {\n        const newDefinition = deepReplace(updatedDefinition, key, value)\n        setUpdatedDefinition(newDefinition)\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, newDefinition))\n        setDirty(!deepEqual(definition, updatedDefinition, { strict: true }))\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(definition, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(definition, bindName, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleDelete = async () => {\n        const message = await service.getDeleteAssetDefinitionMessage(definition.asset_type, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateDefinitionField('verifiers', [...updatedDefinition.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    const requestVerifierRemoval = (verifier: VerifierDetail) => {\n        setVerifierToRemove(verifier)\n    }\n\n    const handleRemoveVerifier = async (verifier: VerifierDetail) => {\n        const clonedDefinition = deepcopy(definition)\n        clonedDefinition.verifiers = clonedDefinition.verifiers.filter(v => v.address !== verifier.address)\n        const message = await service.getUpdateAssetDefinitionMessage(clonedDefinition, walletConnectState.address)\n        setTransaction(message)\n        setVerifierToRemove(undefined)\n        setUpdatedDefinition(clonedDefinition)\n    }\n\n    return <DefinitionWrapper border={!creating}>\n        {editable && !creating && <DeleteDefinitionButton title=\"Delete Asset Definition\" onClick={() => setDeletingAssetDefinition(true)} />}\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={updatedDefinition.asset_type} editable={creating} onChange={(e) => { updateDefinitionField('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Display Name\" value={updatedDefinition.display_name} editable={editable} onChange={(e) => { updateDefinitionField('display_name', e.target.value) }} />\n            <InputOrDisplay label=\"Enabled\" editable={editable} checked={updatedDefinition.enabled} value={`${definition.enabled}`} type=\"checkbox\" onChange={(e) => { updateDefinitionField('enabled', e.target.checked) }} />\n            {creating && <InputOrDisplay label=\"Bind Name\" editable checked={bindName} type=\"checkbox\" onChange={(e) => { setBindName(e.target.checked) }} />}\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${updatedDefinition.asset_type}`}/>}</H4>\n            {updatedDefinition.verifiers.length === 0 ? 'No Asset Verifiers' : updatedDefinition.verifiers.map(verifier => <AssetVerifier key={verifier.address}\n                asset_type={updatedDefinition.asset_type}\n                verifier={verifier}\n                editable={editable}\n                service={service}\n                newDefinition={creating}\n                definitionDirty={isNonVerifierDirty}\n                onChange={(verifier) => updateDefinitionField('verifiers', updatedDefinition.verifiers.map(v => v.address === verifier.address ? verifier : v))}\n                requestRemoval={() => requestVerifierRemoval(verifier)}\n            />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && isNonVerifierDirty && <ActionContainer><Button onClick={handleUpdate}>Update Definition</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={updatedDefinition.asset_type} verifier={verifierToAdd} editable creating service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n        {verifierToRemove && <Modal requestClose={() => setVerifierToRemove(undefined)}>\n            {`Are you sure you want to remove verifier for ${updatedDefinition.asset_type} with address ${verifierToRemove.address}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setVerifierToRemove(undefined)}>Cancel</Button>\n                <Button onClick={() => handleRemoveVerifier(verifierToRemove)}>Yes, Remove Verifier</Button>\n            </ActionContainer>\n        </Modal>}\n        {editable && !creating && deletingAssetDefinition && <Modal requestClose={() => setDeletingAssetDefinition(false)}>\n            {`Are you sure you want to delete the asset definition for asset type ${updatedDefinition.asset_type}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setDeletingAssetDefinition(false)}>Cancel</Button>\n                <Button onClick={handleDelete}>Yes, Delete Assset Definition</Button>\n            </ActionContainer>\n        </Modal>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useInvalidateAssetDefinitions, useIsAdmin, useTransaction } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3, H4 } from \"../Headers\";\nimport { AddButton } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\nimport { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n    const [transaction] = useTransaction()\n    const { walletConnectService: wcs } = useWalletConnect()\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    useEffect(() => {\n        if (!transaction) {\n            invalidateAssetDefinitions()\n        }\n    }, [transaction, invalidateAssetDefinitions])\n\n    useEffect(() => {\n        const callback = () => {\n            setAddingDefinition(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} service={service} />)}\n        {!assetDefinitions?.length && <H4>No Asset Definitions</H4>}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating service={service} /></Modal>}\n    </div>\n}\n\n","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    \n    return <>\n        <Wrapper>\n            <div>\n                {walletConnectState.connected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={walletConnectState.connected ? wcs.disconnect : wcs.connect}>\n                {walletConnectState.connected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n            devWallets={[\"figure_web\", \"provenance_extension\"]}\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import { FunctionComponent, MouseEventHandler } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\nimport { useError } from \"../../hooks\";\nimport { RemoveButton } from \"../Button\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 20px 40px;\n    min-width: 300px;\n    max-width: 90%;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    background: ${WHACKY_ACCENT_2};\n    border: 1px solid ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border-bottom: none;\n    font-weight: bold;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    position: absolute;\n    top: 1rem;\n    right: 10px;\n    font-size: 1rem;\n`\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`\n\nexport interface ErrorPopupProps {\n    \n}\n\nexport const ErrorPopup: FunctionComponent<ErrorPopupProps> = () => {\n    const [error, setError] = useError()\n\n    const closePopup: MouseEventHandler<HTMLElement> = (e) => {\n        e.stopPropagation()\n        setError()\n    }\n\n    if (!error) {\n        return <></>\n    }\n\n    return <Overlay onClick={closePopup}>\n        <Wrapper onClick={(e) => e.stopPropagation()}>\n            <CloseButton onClick={closePopup} />\n            {error}\n        </Wrapper>\n    </Overlay>\n}","import './App.css';\nimport { BrowserRouter, Navigate, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { WalletContextProvider } from '@provenanceio/wallet-lib';\nimport { useSetNetwork, useNetworkConfig } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\nimport { TransactionHandler } from './components/TransactionHandler';\nimport { ErrorPopup } from './components/Popup';\n\nfunction App() {\n  const networkConfig = useNetworkConfig()\n\n  return <WalletConnectContextProvider network={networkConfig.network}>\n      <WalletContextProvider \n        grpcServiceAddress={networkConfig.grpcUrl}\n        walletUrl={networkConfig.walletUrl}>\n        <BrowserRouter basename='frontend-asset-classification'>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n            <Route path=\"*\" element={<Navigate to=\"/testnet\" />} />\n          </Routes>\n        </BrowserRouter>\n      </WalletContextProvider>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    wcs.setNetwork(network || 'mainnet')\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n      <TransactionHandler />\n      <ErrorPopup />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const TESTNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const MAINNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.sc.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'\n","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\nimport { RemoveButton } from \"../Button\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 100;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: min(1200px, 90%);\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n    position: relative;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    font-size: 1rem;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 101;\n`\n\ninterface ModalProps {\n    closeable?: boolean,\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose, closeable = true }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {closeable && <CloseButton onClick={requestClose} />}\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}"],"sourceRoot":""}