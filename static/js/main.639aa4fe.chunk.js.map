{"version":3,"sources":["services/WasmService.ts","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","services/AssetClassificationContractService.ts","hooks/useNetworkConfig.ts","hooks/useAssetClassificationService.ts","hooks/useAssetDefinitions.ts","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","hooks/useTransaction.ts","hooks/useError.ts","components/TransactionHandler/TransactionHandler.tsx","models/ContractBase.ts","models/AssetClassificationContract.ts","components/Headers/index.tsx","components/Page/PageWrapper.tsx","components/Layout/TwoColumn.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","components/AssetClassification/EntityDetailDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","components/Popup/ErrorPopup.tsx","App.tsx","index.tsx","components/Modal/Modal.tsx","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts"],"names":["WasmService","grpcUrl","nameQueryClient","NameQueryClient","PROD_GRPC_URL","wasmQueryClient","WasmQueryClient","this","name","Promise","resolve","reject","QueryResolveRequest","setName","error","res","Error","code","message","getAddress","contractAddress","query","queryData","Buffer","from","JSON","stringify","toString","smartContractState","QuerySmartContractStateRequest","setAddress","setQueryData","parse","getData_asU8","Button","styled","button","secondary","DARK_BG","DARK_TEXT","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","div","AssetClassificationContractService","aliasName","wasmService","a","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","asset_type","QueryAssetDefinition","fromAssetType","assetDefinition","bindName","address","contractAddr","msg","AddAssetDefinition","setBindName","MsgExecuteContract","setMsg","toJson","setFundsList","setContract","setSender","txRaw","serializeBinary","txPretty","toJsonPretty","UpdateAssetDefinition","assetType","DeleteAssetDefinition","verifier","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","network","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","contractAlias","MAINNET_ASSET_CONTRACT_ALIAS_NAME","TESTNET_ASSET_CONTRACT_ALIAS_NAME","useNetworkConfig","paramNetwork","useParams","initialNetwork","networkOrDefault","useQuery","staleTime","Infinity","initialData","data","useSetNetwork","queryClient","useQueryClient","useCallback","newNetwork","invalidateQueries","useAssetClassificationService","networkConfig","useMemo","useAssetDefinitions","service","listInvoiceAssetDefinitions","asset_definitions","useInvalidateAssetDefinitions","useAssetClassificationConfig","getConfig","retry","useIsAdmin","walletConnectState","useWalletConnect","config","isLoading","admin","useTransaction","transaction","getQueryData","setTransaction","undefined","useError","setError","TransactionHandler","wcs","walletConnectService","invalidateAssetDefinitions","handleTransaction","tx","customAction","Any","setTypeUrl","MSG_EXECUTE_CONTRACT_TYPE","setValue","description","method","useEffect","completeListener","console","log","addListener","WINDOW_MESSAGES","CUSTOM_ACTION_COMPLETE","failedListener","CUSTOM_ACTION_FAILED","removeListener","closeable","requestClose","style","marginTop","ContractMsg","query_asset_definition","qualifier","type","value","scope_spec_address","setScopeSpecAddress","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","verifiers","enabled","scope_spec_identifier","bind_name","newDefinition","newVerifier","onboarding_cost","onboarding_denom","fee_destinations","entity_detail","home_url","source_url","newEntityDetail","add_asset_definition","asset_definition","scope_spec_uuid","update_asset_definition","delete_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","Body","LIGHT_BG","Content","PageWrapper","children","TwoColumnFlex","actionColumn","Input","input","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","rest","disabled","initialState","entityDetail","EntityDetailDisplay","detail","handleChange","useState","params","setParams","updateParam","key","onChange","e","target","FeeDestinationControlWrapper","FeeDestinationContentWrapper","FeeDestinationDetails","destination","requestRemoval","fee_amount","onClick","AssetVerifierWrapper","AssetVerifierDetails","DeleteVerifierButton","getOnboardingCost","intitialState","onboardingCost","AssetVerifier","creating","definitionDirty","v","originalVerifier","setOriginalVerifier","dirty","setDirty","setOnboardingCost","deepEqual","strict","deepcopy","handleUpdate","getUpdateAssetVerifierMessage","handleCreate","getAddAssetVerifierMessage","title","cost","match","exec","groups","handleCostChange","FeeDestinations","float","length","map","filter","d","DefinitionWrapper","WHITE","border","DeleteDefinitionButton","DefinitionDetails","AssetVerifiers","definition","AssetDefinition","isNonVerifierDirty","setIsNonVerifierDirty","originalDefinition","setOriginalDefinition","verifierToAdd","setVerifierToAdd","verifierToRemove","setVerifierToRemove","deletingAssetDefinition","setDeletingAssetDefinition","calculateIsNonVerifierDirty","curr","original","originalDef","callback","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","handleDelete","getDeleteAssetDefinitionMessage","handleRemoveVerifier","clonedDefinition","checked","requestVerifierRemoval","Modal","AssetTypeConfig","assetDefinitions","isError","addingDefinition","setAddingDefinition","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","connected","disconnect","connect","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checkedIcon","uncheckedIcon","CloseButton","Overlay","ErrorPopup","closePopup","stopPropagation","AppContent","location","useLocation","setNetwork","path","element","display","justifyContent","App","grpcServiceAddress","basename","to","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","ModalOverlay","TRANSPARENT_DARK_BG","ModalContainer","RICH_BLACK","CULTURED_GRAY"],"mappings":"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","file":"static/js/main.639aa4fe.chunk.js","sourcesContent":["import { Error as ServerError } from 'grpc-web';\nimport { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}","import styled from \"styled-components\"\nimport { DARK_BG, DARK_TEXT, LIGHT_TEXT } from \"../../constants\"\n\nexport interface ButtonProps {\n    secondary?: boolean\n}\n\nexport const Button = styled.button<ButtonProps>`\n    padding: 10px 20px;\n    background: ${({ secondary }) => secondary ? 'transparent' : DARK_BG};\n    color: ${({ secondary }) => secondary ? DARK_TEXT : LIGHT_TEXT};\n    border: ${({ secondary }) => secondary ? `1px solid ${DARK_TEXT}` :'none'};\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n    > *:not(:last-child) {\n        margin-right: 10px;\n    }\n`","import { MsgExecuteContract } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { PROD_GRPC_URL } from \"../constants\"\nimport { TransactionMeta } from \"../hooks\"\nimport { AddAssetDefinition, AddAssetVerifier, DeleteAssetDefinition, QueryAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n\n    constructor(grpcUrl: string, public aliasName: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listInvoiceAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getInvoiceAssetDefinition(asset_type: string): Promise<QueryAssetDefinitionResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinition, QueryAssetDefinitionResponse>(await this.getContractAddress(), QueryAssetDefinition.fromAssetType(asset_type))\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetDefinition(assetDefinition)\n            .setBindName(bindName)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetDefinition(assetDefinition)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getDeleteAssetDefinitionMessage(assetType: string, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = DeleteAssetDefinition.fromAssetType(assetType)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { MAINNET_ASSET_CONTRACT_ALIAS_NAME, NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TESTNET_ASSET_CONTRACT_ALIAS_NAME, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n    contractAlias: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n    contractAlias: network === 'mainnet' ? MAINNET_ASSET_CONTRACT_ALIAS_NAME : TESTNET_ASSET_CONTRACT_ALIAS_NAME,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl, networkConfig.contractAlias)\n    }, [networkConfig])\n}","import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return (await service.listInvoiceAssetDefinitions()).asset_definitions\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n    const networkConfig = useNetworkConfig()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries(['network', networkConfig.network, 'asset-definitions'])\n    }, [queryClient, networkConfig.network])\n}","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity,\n        retry: false\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport interface TransactionMeta {\n    txRaw: string,\n    txPretty: string,\n}\n\nexport const useTransaction = (): [TransactionMeta | undefined, (tx?: TransactionMeta | undefined) => void] => {\n    const queryClient = useQueryClient()\n    const { data: transaction } = useQuery(['transaction'], () => {\n        return queryClient.getQueryData<TransactionMeta>(['transaction'])\n    })\n\n    const setTransaction = useCallback((transaction: TransactionMeta | undefined = undefined) => {\n        queryClient.setQueryData(['transaction'], transaction)\n    }, [queryClient])\n\n    return [transaction, setTransaction]\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport type Error = string | undefined\n\nexport const useError = (): [Error, (error?: Error) => void] => {\n    const queryClient = useQueryClient()\n    const {data: error} = useQuery(['error'], () => {\n        return queryClient.getQueryData<string>(['error'])\n    })\n\n    const setError = useCallback((error: Error) => {\n        queryClient.setQueryData(['error'], error)\n    }, [queryClient])\n\n    return [error, setError]\n}","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\nimport { BroadcastResults } from \"@provenanceio/walletconnect-js/lib/types\";\nimport { BaseResults } from \"@provenanceio/walletconnect-js/lib/types/BaseResults\";\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\";\nimport { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../../constants\";\nimport { useError, useInvalidateAssetDefinitions, useTransaction } from \"../../hooks\";\nimport { H1, H2 } from \"../Headers\";\nimport { Modal } from \"../Modal\";\n\nexport interface TransactionHandlerProps {\n    \n}\n\nexport const TransactionHandler: FunctionComponent<TransactionHandlerProps> = () => {\n    const [transaction, setTransaction] = useTransaction()\n    const [, setError] = useError()\n    const { walletConnectService: wcs } = useWalletConnect()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n\n    const handleTransaction = useCallback(async (tx: string) => {\n        try {\n            await wcs.customAction({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(tx).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n                method: 'provenance_sendTransaction',\n            })\n        } catch (e) {\n    \n        }\n    }, [wcs])\n\n    // todo: listeners to close\n\n    useEffect(() => {\n        if (transaction) {\n            handleTransaction(transaction.txRaw)\n        }\n    }, [transaction, handleTransaction])\n\n    useEffect(() => {\n        const completeListener = (res: BroadcastResults) => {\n            console.log('CUSTOM_ACTION_COMPLETE', res)\n            setTransaction()\n            invalidateAssetDefinitions()\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n        const failedListener = (res: BaseResults) => {\n            console.log('CUSTOM_ACTION_FAILED', res)\n            setTransaction()\n            setError(`Transaction Error: ${res.error}`)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        console.log('listeners registered')\n        return () => {\n            console.log('removing listeners')\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        }\n    }, [setTransaction, wcs, setError, invalidateAssetDefinitions])\n\n    if (!transaction) {\n        return <></>\n    }\n\n    return <Modal closeable={false} requestClose={() => {}}>\n        <H1 style={{ marginTop: 0 }}>Open Provenance Wallet to sign transaction</H1>\n        <H2>Transaction Message</H2>\n        <pre>\n            {transaction.txPretty}\n        </pre>\n    </Modal>\n}","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n\n    toJsonPretty(): string {\n        return JSON.stringify(this, undefined, 2)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        qualifier?: AssetQualifier\n    } = {}\n\n    static fromAssetType(asset_type: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setAssetType(asset_type)\n    }\n\n    static fromScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setScopeSpecAddress(scope_spec_address)\n    }\n\n    setAssetType(asset_type: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'asset_type',\n            value: asset_type,\n        }\n        return this\n    }\n\n    setScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'scope_spec_address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport type AssetQualifier = AssetTypeAssetQualifier | ScopeSpecAddressAssetQualifier\n\nexport interface AssetTypeAssetQualifier {\n    type: 'asset_type',\n    value: string\n}\n\nexport interface ScopeSpecAddressAssetQualifier {\n    type: 'scope_spec_address',\n    value: string\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    scope_spec_address: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    scope_spec_identifier: ScopeSpecIdentifier,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name?: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        scope_spec_identifier: {\n            type: 'address',\n            value: assetDefinition.scope_spec_address\n        },\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport type ScopeSpecIdentifier = UuidScopeSpecIdentifier | AddressScopeSpecIdentifier\n\nexport interface UuidScopeSpecIdentifier {\n    type: 'uuid',\n    value: string,\n}\n\nexport interface AddressScopeSpecIdentifier {\n    type: 'address',\n    value: string,\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        scope_spec_address: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    address: string,\n    onboarding_cost: string,\n    onboarding_denom: string,\n    fee_destinations: FeeDestination[],\n    entity_detail?: EntityDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_amount: string,\n    entity_detail?: EntityDetail,\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n        delete this.update_asset_definition.asset_definition.bind_name\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport class DeleteAssetDefinition extends ContractMsg {\n    delete_asset_definition: {\n        qualifier?: AssetQualifier,\n    } = {}\n\n    static fromAssetType(asset_type: string): DeleteAssetDefinition {\n        return new DeleteAssetDefinition().setAssetType(asset_type)\n    }\n\n    static fromScopeSpecAddress(scope_spec_address: string): DeleteAssetDefinition {\n        return new DeleteAssetDefinition().setScopeSpecAddress(scope_spec_address)\n    }\n\n    setAssetType(asset_type: string): DeleteAssetDefinition {\n        this.delete_asset_definition.qualifier = {\n            type: 'asset_type',\n            value: asset_type,\n        }\n        return this\n    }\n\n    setScopeSpecAddress(scope_spec_address: string): DeleteAssetDefinition {\n        this.delete_asset_definition.qualifier = {\n            type: 'scope_spec_address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport interface QueryAssetDefinitionsResponse {\n    asset_definitions: QueryAssetDefinitionResponse[]\n}\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: ${({ type }) => type === 'checkbox' ? 'auto': '100%'};\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable || rest.type === 'checkbox' ?\n            <Input disabled={!editable} value={value} {...rest} /> :\n            value ? <DisplayWrapper>{value}</DisplayWrapper> : <DisplayWrapper>&nbsp;</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { EntityDetail } from \"../../models\"\nimport { InputOrDisplay } from \"../Input\";\n\ninterface EntityDetailProps {\n    detail: EntityDetail,\n    editable: boolean,\n    handleChange: () => any,\n}\n\nconst initialState = (entityDetail?: EntityDetail) => ({\n    name: entityDetail?.name || '',\n    description: entityDetail?.description || '',\n    home_url: entityDetail?.home_url || '',\n    source_url: entityDetail?.source_url || '',\n})\n\nexport const EntityDetailDisplay: FunctionComponent<EntityDetailProps> = ({ detail, editable, handleChange }) => {\n    const [params, setParams] = useState(initialState(detail));\n\n    useEffect(() => setParams(initialState(detail)), [detail]);\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value,\n        });\n        (detail as any)[key] = value;\n        handleChange();\n    };\n\n    return <>\n        <InputOrDisplay label=\"Name\" value={params.name} editable={editable} onChange={(e) => { updateParam('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={params.description} editable={editable} onChange={(e) => { updateParam('description', e.target.value) }} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={params.home_url} editable={editable} onChange={(e) => { updateParam('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={params.source_url} editable={editable} onChange={(e) => { updateParam('source_url', e.target.value) }} />\n    </>;\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { EntityDetail, FeeDestination, newEntityDetail } from \"../../models\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\";\n\nconst FeeDestinationControlWrapper = styled.div`\n    display: flex;\n    gap: 10px;\n    &:not(:last-child) {\n        padding-bottom: 25px;\n    }\n`;\n\nconst FeeDestinationContentWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n    width: 100%;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    handleChange: () => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, handleChange, requestRemoval }) => {\n    useEffect(() => {\n        if (!destination.entity_detail) {\n            destination.entity_detail = newEntityDetail();\n        }\n    }, [destination])\n\n    const [params, setParams] = useState({\n        address: destination.address,\n        fee_amount: destination.fee_amount,\n        entity_detail: destination.entity_detail,\n    })\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (destination as any)[key] = value\n        handleChange()\n    }\n\n    return <FeeDestinationControlWrapper>\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n        <FeeDestinationContentWrapper>\n            <InputOrDisplay label=\"Address\" value={destination.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Fee Amount\" value={destination.fee_amount} editable={editable} onChange={(e) => { updateParam('fee_amount', e.target.value) }} />\n            <EntityDetailDisplay detail={destination.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n        </FeeDestinationContentWrapper>\n    </FeeDestinationControlWrapper>;\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, EntityDetail, FeeDestination } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H5 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\"\n\nconst AssetVerifierWrapper = styled.div`\n    position: relative;\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst DeleteVerifierButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: -2px;\n    font-size: 1rem;\n    transform: translate(-50%, -50%);\n`\n\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    service: AssetClassificationContractService,\n    newDefinition?: boolean,\n    definitionDirty?: boolean,\n    requestRemoval?: () => any,\n    onChange?: (verifier: VerifierDetail) => any,\n}\n\nconst getOnboardingCost = (verifier: VerifierDetail): string => `${verifier.onboarding_cost}${verifier.onboarding_denom}`\n\nconst intitialState = (verifier: VerifierDetail) => ({\n    address: verifier.address,\n    onboardingCost: getOnboardingCost(verifier),\n    fee_destinations: verifier.fee_destinations\n})\n\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, newDefinition, definitionDirty, service, onChange = (v) => {}, requestRemoval = () => {} }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n    const [originalVerifier, setOriginalVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(getOnboardingCost(verifier))\n\n    const [params, setParams] = useState(intitialState(verifier))\n\n    const handleChange = () => {\n        setDirty(!deepEqual(verifier, originalVerifier, { strict: true }))\n        onChange(verifier)\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (verifier as any)[key] = value\n        handleChange()\n    }\n\n    useEffect(() => {\n        setOriginalVerifier(deepcopy(verifier))\n        setParams(intitialState(verifier))\n        setOnboardingCost(getOnboardingCost(verifier))\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n    }, [verifier])\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        verifier.onboarding_cost = (match?.groups && match.groups['cost']) || '0'\n        verifier.onboarding_denom = (match?.groups && match.groups['denom']) || ''\n        setOnboardingCost(getOnboardingCost(verifier))\n        handleChange()\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const addFeeDestination = () => {\n        const newFeeDestination: FeeDestination = {\n            address: '',\n            fee_amount: '',\n        }\n        updateParam('fee_destinations', [...params.fee_destinations, newFeeDestination])\n    }\n\n    return <AssetVerifierWrapper>\n        {!creating && editable && <DeleteVerifierButton onClick={requestRemoval} title=\"Remove Asset Verifier\" />}\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={params.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <EntityDetailDisplay detail={verifier.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <H5>Fee Destinations {editable && <AddButton onClick={addFeeDestination} style={{float: \"right\"}} title=\"Add Fee Destination\" />}</H5>\n            {verifier.fee_destinations.length === 0 ? 'No Fee Destinations' : verifier.fee_destinations.map(destination => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} handleChange={handleChange} requestRemoval={() => updateParam('fee_destinations', params.fee_destinations.filter(d => d !== destination))} />)}\n        </FeeDestinations>\n        {!newDefinition && !creating && editable && dirty && !definitionDirty && <ActionContainer><Button onClick={handleUpdate}>Update Verifier</Button></ActionContainer>}\n        {!newDefinition && creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\nconst FeeDestinations = styled.div`\n`","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\n\nconst DefinitionWrapper = styled.div<{ border: boolean }>`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: ${({ border }) => border && `1px solid ${DARK_BG}`};\n    position: relative;\n`\n\nconst DeleteDefinitionButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(-50%, -50%);\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    service: AssetClassificationContractService,\n}\n\nconst initialState = (definition: QueryAssetDefinitionResponse) => ({\n    asset_type: definition.asset_type,\n    scope_spec_address: definition.scope_spec_address,\n    verifiers: definition.verifiers,\n    enabled: definition.enabled,\n})\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, service }) => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n\n    const [dirty, setDirty] = useState(false)\n    const [isNonVerifierDirty, setIsNonVerifierDirty] = useState(false)\n    const [originalDefinition, setOriginalDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName, setBindName] = useState(true)\n    const [verifierToRemove, setVerifierToRemove] = useState<VerifierDetail>()\n    const [deletingAssetDefinition, setDeletingAssetDefinition] = useState(false)\n\n    const [params, setParams] = useState(initialState(definition))\n\n\n    const calculateIsNonVerifierDirty = (curr: QueryAssetDefinitionResponse, original: QueryAssetDefinitionResponse) => {\n        return !deepEqual({ ...curr, verifiers: [] }, { ...original, verifiers: [] })\n    }\n\n    useEffect(() => {\n        console.log('performing deep copy of', definition.asset_type)\n        const originalDef = deepcopy(definition)\n        setOriginalDefinition(originalDef)\n        setParams(initialState(definition))\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDef))\n    }, [definition])\n\n    useEffect(() => {\n        const callback = () => {\n            setVerifierToAdd(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(definition, originalDefinition, { strict: true }))\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (definition as any)[key] = value\n        handleChange()\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDefinition))\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(definition, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(definition, bindName, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleDelete = async () => {\n        const message = await service.getDeleteAssetDefinitionMessage(definition.asset_type, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateParam('verifiers', [...params.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    const requestVerifierRemoval = (verifier: VerifierDetail) => {\n        setVerifierToRemove(verifier)\n    }\n\n    const handleRemoveVerifier = async (verifier: VerifierDetail) => {\n        const clonedDefinition = deepcopy(definition)\n        clonedDefinition.verifiers = clonedDefinition.verifiers.filter(v => v.address !== verifier.address)\n        const message = await service.getUpdateAssetDefinitionMessage(clonedDefinition, walletConnectState.address)\n        setTransaction(message)\n        setVerifierToRemove(undefined)\n    }\n\n    return <DefinitionWrapper border={!creating}>\n        {editable && !creating && <DeleteDefinitionButton title=\"Delete Asset Definition\" onClick={() => setDeletingAssetDefinition(true)} />}\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={definition.asset_type} editable={creating} onChange={(e) => { updateParam('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Scope Spec Address\" editable={editable} value={definition.scope_spec_address} onChange={(e) => { updateParam('scope_spec_address', e.target.value) }} />\n            <InputOrDisplay label=\"Enabled\" editable={editable} checked={params.enabled} value={`${definition.enabled}`} type=\"checkbox\" onChange={(e) => { updateParam('enabled', e.target.checked) }} />\n            {creating && <InputOrDisplay label=\"Bind Name\" editable checked={bindName} type=\"checkbox\" onChange={(e) => { setBindName(e.target.checked) }} />}\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${params.asset_type}`}/>}</H4>\n            {definition.verifiers.length === 0 ? 'No Asset Verifiers' : definition.verifiers.map(verifier => <AssetVerifier key={verifier.address}\n                asset_type={definition.asset_type}\n                verifier={verifier}\n                editable={editable}\n                service={service}\n                newDefinition={creating}\n                definitionDirty={isNonVerifierDirty}\n                onChange={(verifier) => updateParam('verifiers', definition.verifiers.map(v => v.address === verifier.address ? verifier : v))}\n                requestRemoval={() => requestVerifierRemoval(verifier)}\n            />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && isNonVerifierDirty && <ActionContainer><Button onClick={handleUpdate}>Update Definition</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={definition.asset_type} verifier={verifierToAdd} editable creating service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n        {verifierToRemove && <Modal requestClose={() => setVerifierToRemove(undefined)}>\n            {`Are you sure you want to remove verifier for ${definition.asset_type} with address ${verifierToRemove.address}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setVerifierToRemove(undefined)}>Cancel</Button>\n                <Button onClick={() => handleRemoveVerifier(verifierToRemove)}>Yes, Remove Verifier</Button>\n            </ActionContainer>\n        </Modal>}\n        {editable && !creating && deletingAssetDefinition && <Modal requestClose={() => setDeletingAssetDefinition(false)}>\n            {`Are you sure you want to delete the asset definition for asset type ${definition.asset_type}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setDeletingAssetDefinition(false)}>Cancel</Button>\n                <Button onClick={handleDelete}>Yes, Delete Assset Definition</Button>\n            </ActionContainer>\n        </Modal>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useInvalidateAssetDefinitions, useIsAdmin, useTransaction } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3, H4 } from \"../Headers\";\nimport { AddButton } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\nimport { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n    const [transaction] = useTransaction()\n    const { walletConnectService: wcs } = useWalletConnect()\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    useEffect(() => {\n        if (!transaction) {\n            invalidateAssetDefinitions()\n        }\n    }, [transaction, invalidateAssetDefinitions])\n\n    useEffect(() => {\n        const callback = () => {\n            setAddingDefinition(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} service={service} />)}\n        {!assetDefinitions?.length && <H4>No Asset Definitions</H4>}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating service={service} /></Modal>}\n    </div>\n}\n\n","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    \n    return <>\n        <Wrapper>\n            <div>\n                {walletConnectState.connected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={walletConnectState.connected ? wcs.disconnect : wcs.connect}>\n                {walletConnectState.connected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import { FunctionComponent, MouseEventHandler } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\nimport { useError } from \"../../hooks\";\nimport { RemoveButton } from \"../Button\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 20px 40px;\n    min-width: 300px;\n    max-width: 90%;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    background: ${WHACKY_ACCENT_2};\n    border: 1px solid ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border-bottom: none;\n    font-weight: bold;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    position: absolute;\n    top: 1rem;\n    right: 10px;\n    font-size: 1rem;\n`\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`\n\nexport interface ErrorPopupProps {\n    \n}\n\nexport const ErrorPopup: FunctionComponent<ErrorPopupProps> = () => {\n    const [error, setError] = useError()\n\n    const closePopup: MouseEventHandler<HTMLElement> = (e) => {\n        e.stopPropagation()\n        setError()\n    }\n\n    if (!error) {\n        return <></>\n    }\n\n    return <Overlay onClick={closePopup}>\n        <Wrapper onClick={(e) => e.stopPropagation()}>\n            <CloseButton onClick={closePopup} />\n            {error}\n        </Wrapper>\n    </Overlay>\n}","import './App.css';\nimport { BrowserRouter, Navigate, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { WalletContextProvider } from '@provenanceio/wallet-lib';\nimport { useSetNetwork, useNetworkConfig } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\nimport { TransactionHandler } from './components/TransactionHandler';\nimport { ErrorPopup } from './components/Popup';\n\nfunction App() {\n  const networkConfig = useNetworkConfig()\n\n  return <WalletConnectContextProvider network={networkConfig.network}>\n      <WalletContextProvider \n        grpcServiceAddress={networkConfig.grpcUrl}\n        walletUrl={networkConfig.walletUrl}>\n        <BrowserRouter basename='frontend-asset-classification'>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n            <Route path=\"*\" element={<Navigate to=\"/testnet\" />} />\n          </Routes>\n        </BrowserRouter>\n      </WalletContextProvider>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    wcs.setNetwork(network || 'mainnet')\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n      <TransactionHandler />\n      <ErrorPopup />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\nimport { RemoveButton } from \"../Button\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 100;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: min(1200px, 90%);\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n    position: relative;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    font-size: 1rem;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 101;\n`\n\ninterface ModalProps {\n    closeable?: boolean,\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose, closeable = true }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {closeable && <CloseButton onClick={requestClose} />}\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const TESTNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const MAINNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.sc.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'"],"sourceRoot":""}