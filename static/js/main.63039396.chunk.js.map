{"version":3,"sources":["services/WasmService.ts","components/Modal/Modal.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","services/AssetClassificationContractService.ts","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","components/Layout/TwoColumn.tsx","models/ContractBase.ts","models/AssetClassificationContract.ts","hooks/useNetworkConfig.ts","hooks/useAssetClassificationService.ts","hooks/useAssetDefinitions.ts","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","components/Page/PageWrapper.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","App.tsx","index.tsx","components/Headers/index.tsx","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts"],"names":["WasmService","grpcUrl","nameQueryClient","NameQueryClient","PROD_GRPC_URL","wasmQueryClient","WasmQueryClient","this","name","Promise","resolve","reject","QueryResolveRequest","setName","error","res","Error","code","message","getAddress","contractAddress","query","queryData","Buffer","from","JSON","stringify","toString","smartContractState","QuerySmartContractStateRequest","setAddress","setQueryData","parse","getData_asU8","ModalOverlay","styled","div","TRANSPARENT_DARK_BG","ModalContainer","DARK_BG","WHITE","Modal","children","requestClose","onClick","e","stopPropagation","Input","input","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","value","rest","FeeDestinationWrapper","FeeDestinationDetails","destination","handleChange","requestRemoval","useState","address","fee_percent","params","setParams","updateParam","key","onChange","target","AssetVerifierWrapper","DARK_TEXT","AssetVerifierDetails","intitialState","verifier","onboardingCost","onboarding_cost","onboarding_denom","fee_destinations","AssetVerifier","asset_type","creating","handleTransaction","service","walletConnectState","useWalletConnect","originalVerifier","setOriginalVerifier","dirty","setDirty","setOnboardingCost","useEffect","deepcopy","entity_detail","newEntityDetail","deepEqual","strict","handleUpdate","a","getUpdateAssetVerifierMessage","handleCreate","getAddAssetVerifierMessage","cost","match","exec","groups","handleCostChange","detail","type","min","FeeDestinations","style","float","title","length","map","filter","d","Button","initialState","entityDetail","description","home_url","source_url","AssetVerifierDetail","DefinitionWrapper","DefinitionDetails","AssetVerifiers","definition","scope_spec_address","verifiers","AssetDefinition","originalDefinition","setOriginalDefinition","verifierToAdd","setVerifierToAdd","bindName","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","newVerifier","AssetTypeConfig","useAssetDefinitions","assetDefinitions","data","isError","isLoading","invalidateAssetDefinitions","useInvalidateAssetDefinitions","useIsAdmin","wcs","walletConnectService","addingDefinition","setAddingDefinition","useAssetClassificationService","console","log","customAction","Any","setTypeUrl","MSG_EXECUTE_CONTRACT_TYPE","setValue","serializeBinary","method","addListener","WINDOW_MESSAGES","CUSTOM_ACTION_COMPLETE","CUSTOM_ACTION_FAILED","TRANSACTION_COMPLETE","TRANSACTION_FAILED","removeAllListeners","newDefinition","AssetClassificationContractService","wasmService","aliasName","ASSET_CONTRACT_ALIAS_NAME","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","QueryAssetDefinition","fromAssetType","assetDefinition","contractAddr","MsgExecuteContract","setMsg","AddAssetDefinition","setBindName","toJson","setFundsList","setContract","setSender","UpdateAssetDefinition","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","button","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","TwoColumnFlex","actionColumn","ContractMsg","query_asset_definition","qualifier","setScopeSpecAddress","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","enabled","scope_spec_identifier","bind_name","update_asset_definition","asset_definition","scope_spec_uuid","add_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","network","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","useNetworkConfig","paramNetwork","useParams","initialNetwork","networkOrDefault","useQuery","staleTime","Infinity","initialData","useSetNetwork","queryClient","useQueryClient","useCallback","newNetwork","invalidateQueries","networkConfig","useMemo","listInvoiceAssetDefinitions","asset_definitions","useAssetClassificationConfig","getConfig","config","admin","Body","LIGHT_BG","Content","PageWrapper","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","connected","disconnect","connect","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checked","checkedIcon","uncheckedIcon","AppContent","location","useLocation","setNetwork","path","element","display","justifyContent","App","grpcServiceAddress","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","RICH_BLACK","CULTURED_GRAY"],"mappings":"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","file":"static/js/main.63039396.chunk.js","sourcesContent":["import { Error as ServerError } from 'grpc-web';\nimport { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: 1200px;\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n`\n\ninterface ModalProps {\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: 100%;\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable ?\n            <Input value={value} {...rest} /> :\n            <DisplayWrapper>{value}</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","import { FunctionComponent, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FeeDestination } from \"../../models\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\n\nconst FeeDestinationWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    handleChange: () => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, handleChange, requestRemoval }) => {\n    const [params, setParams] = useState({\n        address: destination.address,\n        fee_percent: destination.fee_percent\n    })\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (destination as any)[key] = value\n        handleChange()\n    }\n\n    return <FeeDestinationWrapper>\n        <InputOrDisplay label=\"Address\" value={destination.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n        <InputOrDisplay label=\"Fee Percent\" value={destination.fee_percent} editable={editable} onChange={(e) => { updateParam('fee_percent', e.target.value) }} />\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n    </FeeDestinationWrapper>\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, EntityDetail } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button } from \"../Button\"\nimport { H5 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\n\nconst AssetVerifierWrapper = styled.div`\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    handleTransaction: (message: string) => any,\n    service: AssetClassificationContractService\n}\n\nconst intitialState = (verifier: VerifierDetail) => ({\n    address: verifier.address,\n    onboardingCost: `${verifier.onboarding_cost}${verifier.onboarding_denom}`,\n    fee_percent: verifier.fee_percent,\n    fee_destinations: verifier.fee_destinations\n})\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, handleTransaction, service }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n\n    const [originalVerifier, setOriginalVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(`${verifier.onboarding_cost}${verifier.onboarding_denom}`)\n\n    const [params, setParams] = useState(intitialState(verifier))\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (verifier as any)[key] = value\n        handleChange()\n    }\n\n    useEffect(() => {\n        setOriginalVerifier(deepcopy(verifier))\n        setParams(intitialState(verifier))\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n    }, [verifier])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(verifier, originalVerifier, { strict: true }))\n    }\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        verifier.onboarding_cost = (match?.groups && match.groups['cost']) || '0'\n        verifier.onboarding_denom = (match?.groups && match.groups['denom']) || ''\n        setOnboardingCost(`${verifier.onboarding_cost}${verifier.onboarding_denom}`)\n        handleChange()\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        handleTransaction(message)\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        handleTransaction(message)\n    }\n\n    const addFeeDestination = () => {\n        const newFeeDestination = {\n            address: '',\n            fee_percent: '',\n        }\n        updateParam('fee_destinations', [...params.fee_destinations, newFeeDestination])\n    }\n\n    return <AssetVerifierWrapper>\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={params.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <AssetVerifierDetail detail={verifier.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n            <InputOrDisplay label=\"Fee Percent\" type=\"number\" min=\"0\" value={params.fee_percent} editable={editable} onChange={(e) => { updateParam('fee_percent', e.target.value) }} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <H5>Fee Destinations {editable && <AddButton onClick={addFeeDestination} style={{float: \"right\"}} title=\"Add Fee Destination\" />}</H5>\n            {verifier.fee_destinations.length === 0 ? 'No Fee Destinations' : verifier.fee_destinations.map(destination => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} handleChange={handleChange} requestRemoval={() => updateParam('fee_destinations', params.fee_destinations.filter(d => d !== destination))} />)}\n        </FeeDestinations>\n        {!creating && editable && dirty && <ActionContainer><Button onClick={handleUpdate}>Update</Button></ActionContainer>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\ninterface AssetVerifierDetailProps {\n    detail: EntityDetail,\n    editable: boolean,\n    handleChange: () => any\n}\n\nconst initialState = (entityDetail: EntityDetail) => ({\n    name: entityDetail.name,\n    description: entityDetail.description,\n    home_url: entityDetail.home_url,\n    source_url: entityDetail.source_url,\n})\n\nconst AssetVerifierDetail: FunctionComponent<AssetVerifierDetailProps> = ({ detail, editable, handleChange }) => {\n\n    const [params, setParams] = useState(initialState(detail))\n\n    useEffect(() => {\n        setParams(initialState(detail))\n\n    }, [detail])\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (detail as any)[key] = value\n        handleChange()\n    }\n\n    return <>   \n        <InputOrDisplay label=\"Name\" value={params.name} editable={editable} onChange={(e) => { updateParam('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={params.description} editable={editable} onChange={(e) => updateParam('description', e.target.value)} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={params.home_url} editable={editable} onChange={(e) => { updateParam('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={params.source_url} editable={editable} onChange={(e) => { updateParam('source_url', e.target.value) }} />\n    </>\n}\n\nconst FeeDestinations = styled.div`\n`","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\n\nconst DefinitionWrapper = styled.div`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    handleTransaction: (message: string) => any,\n    service: AssetClassificationContractService,\n}\n\nconst initialState = (definition: QueryAssetDefinitionResponse) => ({\n    asset_type: definition.asset_type,\n    scope_spec_address: definition.scope_spec_address,\n    verifiers: definition.verifiers,\n})\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, handleTransaction, service }) => {\n\n    // todo: edit handler at this level for individual asset definition\n    const { walletConnectState } = useWalletConnect()\n\n\n    const [dirty, setDirty] = useState(false)\n    const [originalDefinition, setOriginalDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName] = useState(true) // todo: add bind name checkbox\n\n    const [params, setParams] = useState(initialState(definition))\n\n    useEffect(() => {\n        setOriginalDefinition(deepcopy(definition))\n        setParams(initialState(definition))\n    }, [definition])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(definition, originalDefinition, { strict: true }))\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (definition as any)[key] = value\n        handleChange()\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(definition, walletConnectState.address)\n        handleTransaction(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(definition, bindName, walletConnectState.address)\n        handleTransaction(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateParam('verifiers', [...params.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    return <DefinitionWrapper>\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={definition.asset_type} editable={creating} onChange={(e) => { updateParam('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Scope Spec Address\" editable={editable} value={definition.scope_spec_address} onChange={(e) => { updateParam('scope_spec_address', e.target.value) }} />\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${params.asset_type}`}/>}</H4>\n            {definition.verifiers.length === 0 ? 'No Asset Verifiers' : definition.verifiers.map(verifier => <AssetVerifier key={verifier.address} asset_type={definition.asset_type} verifier={verifier} editable={editable} handleTransaction={handleTransaction} service={service} />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && <ActionContainer><Button onClick={handleUpdate}>Update</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={definition.asset_type} verifier={verifierToAdd} editable creating handleTransaction={handleTransaction} service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useInvalidateAssetDefinitions, useIsAdmin } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3 } from \"../Headers\";\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../../constants\";\nimport { AddButton } from \"../Button\";\nimport { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n\n    const { walletConnectService: wcs } = useWalletConnect()\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    const handleTransaction = async (message: string) => {\n        console.log(\"handling transaction\", message)\n        try {\n            await wcs.customAction({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(message).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n                method: 'provenance_sendTransaction',\n            })\n            invalidateAssetDefinitions()\n        } catch (e) {\n            console.log('err', e)\n        }\n    }\n\n    useEffect(() => {\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, (res) => {\n            console.log('CUSTOM_ACTION_COMPLETE', res)\n            invalidateAssetDefinitions()\n        })\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, (res) => {\n            console.log('CUSTOM_ACTION_FAILED', res)\n        })\n        wcs.addListener(WINDOW_MESSAGES.TRANSACTION_COMPLETE, (res) => {\n            console.log('TRANSACTION_COMPLETE', res)\n        })\n        wcs.addListener(WINDOW_MESSAGES.TRANSACTION_FAILED, (res) => {\n            console.log('TRANSACTION_FAILED', res)\n        })\n        console.log('listeners registered')\n        return () => wcs.removeAllListeners()\n    }, [invalidateAssetDefinitions, wcs])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} handleTransaction={handleTransaction} service={service} />)}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating handleTransaction={handleTransaction} service={service} /></Modal>}\n    </div>\n}\n\n","import { MsgExecuteContract } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { ASSET_CONTRACT_ALIAS_NAME, PROD_GRPC_URL } from \"../constants\"\nimport { AddAssetDefinition, AddAssetVerifier, QueryAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n    aliasName: string = ASSET_CONTRACT_ALIAS_NAME\n\n    constructor(grpcUrl: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listInvoiceAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getInvoiceAssetDefinition(asset_type: string): Promise<QueryAssetDefinitionResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinition, QueryAssetDefinitionResponse>(await this.getContractAddress(), QueryAssetDefinition.fromAssetType(asset_type))\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string) {\n        const contractAddr = await this.getContractAddress()\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(new AddAssetDefinition(assetDefinition)\n                .setBindName(bindName)\n                .toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return Buffer.from(message.serializeBinary()).toString(\"base64\");\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string) {\n        const contractAddr = await this.getContractAddress()\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(new UpdateAssetDefinition(assetDefinition)\n                .toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return Buffer.from(message.serializeBinary()).toString(\"base64\");\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string) {\n        const contractAddr = await this.getContractAddress()\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(new UpdateAssetVerifier()\n                .setAssetType(asset_type)\n                .setVerifier(verifier)\n                .toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return Buffer.from(message.serializeBinary()).toString(\"base64\");\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string) {\n        const contractAddr = await this.getContractAddress()\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(new AddAssetVerifier()\n                .setAssetType(asset_type)\n                .setVerifier(verifier)\n                .toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return Buffer.from(message.serializeBinary()).toString(\"base64\");\n    }\n}","import styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const Button = styled.button`\n    padding: 10px 20px;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n`","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        qualifier?: AssetQualifier\n    } = {}\n\n    static fromAssetType(asset_type: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setAssetType(asset_type)\n    }\n\n    static fromScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setScopeSpecAddress(scope_spec_address)\n    }\n\n    setAssetType(asset_type: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'asset_type',\n            value: asset_type,\n        }\n        return this\n    }\n\n    setScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'scope_spec_address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport type AssetQualifier = AssetTypeAssetQualifier | ScopeSpecAddressAssetQualifier\n\nexport interface AssetTypeAssetQualifier {\n    type: 'asset_type',\n    value: string\n}\n\nexport interface ScopeSpecAddressAssetQualifier {\n    type: 'scope_spec_address',\n    value: string\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    scope_spec_address: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    scope_spec_identifier: ScopeSpecIdentifier,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        scope_spec_identifier: {\n            type: 'address',\n            value: assetDefinition.scope_spec_address\n        },\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport type ScopeSpecIdentifier = UuidScopeSpecIdentifier | AddressScopeSpecIdentifier\n\nexport interface UuidScopeSpecIdentifier {\n    type: 'uuid',\n    value: string,\n}\n\nexport interface AddressScopeSpecIdentifier {\n    type: 'address',\n    value: string,\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        scope_spec_address: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    address: string,\n    onboarding_cost: string,\n    onboarding_denom: string,\n    fee_percent: string,\n    fee_destinations: FeeDestination[],\n    entity_detail?: EntityDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_percent: '0',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_percent: string,\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport interface QueryAssetDefinitionsResponse {\n    asset_definitions: QueryAssetDefinitionResponse[]\n}\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl)\n    }, [networkConfig])\n}","import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return (await service.listInvoiceAssetDefinitions()).asset_definitions\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries('asset-definitions')\n    }, [queryClient])\n}","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    \n    return <>\n        <Wrapper>\n            <div>\n                {walletConnectState.connected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={walletConnectState.connected ? wcs.disconnect : wcs.connect}>\n                {walletConnectState.connected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import './App.css';\nimport { BrowserRouter, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { WalletContextProvider } from '@provenanceio/wallet-lib';\nimport { useSetNetwork, useNetworkConfig } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\n\nfunction App() {\n  const networkConfig = useNetworkConfig()\n\n  return <WalletConnectContextProvider network={networkConfig.network}>\n      <WalletContextProvider \n        grpcServiceAddress={networkConfig.grpcUrl}\n        walletUrl={networkConfig.walletUrl}>\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n          </Routes>\n        </BrowserRouter>\n      </WalletContextProvider>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    wcs.setNetwork(network || 'mainnet')\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'"],"sourceRoot":""}