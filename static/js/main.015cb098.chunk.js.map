{"version":3,"sources":["services/WasmService.ts","services/AssetClassificationContractService.ts","hooks/useNetworkConfig.ts","hooks/useAssetClassificationService.ts","hooks/useAssetDefinitions.ts","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","hooks/useTransaction.ts","hooks/useError.ts","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","components/TransactionHandler/TransactionHandler.tsx","models/ContractBase.ts","models/AssetClassificationContract.ts","components/Headers/index.tsx","components/Page/PageWrapper.tsx","components/Layout/TwoColumn.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","components/Popup/ErrorPopup.tsx","App.tsx","index.tsx","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts","components/Modal/Modal.tsx"],"names":["WasmService","grpcUrl","nameQueryClient","NameQueryClient","PROD_GRPC_URL","wasmQueryClient","WasmQueryClient","this","name","Promise","resolve","reject","QueryResolveRequest","setName","error","res","Error","code","message","getAddress","contractAddress","query","queryData","Buffer","from","JSON","stringify","toString","smartContractState","QuerySmartContractStateRequest","setAddress","setQueryData","parse","getData_asU8","AssetClassificationContractService","wasmService","aliasName","ASSET_CONTRACT_ALIAS_NAME","a","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","asset_type","QueryAssetDefinition","fromAssetType","assetDefinition","bindName","address","contractAddr","msg","AddAssetDefinition","setBindName","MsgExecuteContract","setMsg","toJson","setFundsList","setContract","setSender","txRaw","serializeBinary","txPretty","toJsonPretty","UpdateAssetDefinition","verifier","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","network","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","useNetworkConfig","paramNetwork","useParams","initialNetwork","networkOrDefault","useQuery","staleTime","Infinity","initialData","data","useSetNetwork","queryClient","useQueryClient","useCallback","newNetwork","invalidateQueries","useAssetClassificationService","networkConfig","useMemo","useAssetDefinitions","service","listInvoiceAssetDefinitions","asset_definitions","useInvalidateAssetDefinitions","useAssetClassificationConfig","getConfig","retry","useIsAdmin","walletConnectState","useWalletConnect","config","isLoading","admin","useTransaction","transaction","getQueryData","setTransaction","undefined","useError","setError","Button","styled","button","DARK_BG","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","div","TransactionHandler","wcs","walletConnectService","handleTransaction","tx","console","log","customAction","Any","setTypeUrl","MSG_EXECUTE_CONTRACT_TYPE","setValue","description","method","useEffect","addListener","WINDOW_MESSAGES","CUSTOM_ACTION_COMPLETE","CUSTOM_ACTION_FAILED","removeAllListeners","requestClose","style","marginTop","ContractMsg","query_asset_definition","qualifier","type","value","scope_spec_address","setScopeSpecAddress","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","verifiers","enabled","scope_spec_identifier","bind_name","newDefinition","newVerifier","onboarding_cost","onboarding_denom","fee_percent","fee_destinations","entity_detail","home_url","source_url","newEntityDetail","update_asset_definition","asset_definition","scope_spec_uuid","add_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","Body","LIGHT_BG","Content","PageWrapper","children","TwoColumnFlex","actionColumn","Input","input","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","rest","FeeDestinationWrapper","FeeDestinationDetails","destination","handleChange","requestRemoval","useState","params","setParams","updateParam","key","onChange","e","target","onClick","AssetVerifierWrapper","DARK_TEXT","AssetVerifierDetails","intitialState","onboardingCost","AssetVerifier","creating","originalVerifier","setOriginalVerifier","dirty","setDirty","setOnboardingCost","deepcopy","deepEqual","strict","handleUpdate","getUpdateAssetVerifierMessage","handleCreate","getAddAssetVerifierMessage","cost","match","exec","groups","handleCostChange","detail","min","FeeDestinations","float","title","length","map","filter","d","initialState","entityDetail","AssetVerifierDetail","DefinitionWrapper","WHITE","border","DefinitionDetails","AssetVerifiers","definition","AssetDefinition","originalDefinition","setOriginalDefinition","verifierToAdd","setVerifierToAdd","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","Modal","AssetTypeConfig","assetDefinitions","isError","invalidateAssetDefinitions","addingDefinition","setAddingDefinition","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","connected","disconnect","connect","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checked","checkedIcon","uncheckedIcon","CloseButton","Overlay","ErrorPopup","closePopup","stopPropagation","AppContent","location","useLocation","setNetwork","path","element","display","justifyContent","App","grpcServiceAddress","basename","to","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","RICH_BLACK","CULTURED_GRAY","TRANSPARENT_DARK_BG","ModalOverlay","ModalContainer","closeable"],"mappings":"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","file":"static/js/main.015cb098.chunk.js","sourcesContent":["import { Error as ServerError } from 'grpc-web';\nimport { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}","import { MsgExecuteContract } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { ASSET_CONTRACT_ALIAS_NAME, PROD_GRPC_URL } from \"../constants\"\nimport { TransactionMeta } from \"../hooks\"\nimport { AddAssetDefinition, AddAssetVerifier, QueryAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n    aliasName: string = ASSET_CONTRACT_ALIAS_NAME\n\n    constructor(grpcUrl: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listInvoiceAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getInvoiceAssetDefinition(asset_type: string): Promise<QueryAssetDefinitionResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinition, QueryAssetDefinitionResponse>(await this.getContractAddress(), QueryAssetDefinition.fromAssetType(asset_type))\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetDefinition(assetDefinition)\n            .setBindName(bindName)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetDefinition(assetDefinition)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl)\n    }, [networkConfig])\n}","import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return (await service.listInvoiceAssetDefinitions()).asset_definitions\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries('asset-definitions')\n    }, [queryClient])\n}","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity,\n        retry: false\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport interface TransactionMeta {\n    txRaw: string,\n    txPretty: string,\n}\n\nexport const useTransaction = (): [TransactionMeta | undefined, (tx?: TransactionMeta | undefined) => void] => {\n    const queryClient = useQueryClient()\n    const { data: transaction } = useQuery(['transaction'], () => {\n        return queryClient.getQueryData<TransactionMeta>(['transaction'])\n    })\n\n    const setTransaction = useCallback((transaction: TransactionMeta | undefined = undefined) => {\n        queryClient.setQueryData(['transaction'], transaction)\n    }, [queryClient])\n\n    return [transaction, setTransaction]\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport type Error = string | undefined\n\nexport const useError = (): [Error, (error?: Error) => void] => {\n    const queryClient = useQueryClient()\n    const {data: error} = useQuery(['error'], () => {\n        return queryClient.getQueryData<string>(['error'])\n    })\n\n    const setError = useCallback((error: Error) => {\n        queryClient.setQueryData(['error'], error)\n    }, [queryClient])\n\n    return [error, setError]\n}","import styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const Button = styled.button`\n    padding: 10px 20px;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n`","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\";\nimport { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../../constants\";\nimport { useError, useTransaction } from \"../../hooks\";\nimport { H1, H2 } from \"../Headers\";\nimport { Modal } from \"../Modal\";\n\nexport interface TransactionHandlerProps {\n    \n}\n\nexport const TransactionHandler: FunctionComponent<TransactionHandlerProps> = () => {\n    const [transaction, setTransaction] = useTransaction()\n    const [, setError] = useError()\n    const { walletConnectService: wcs } = useWalletConnect()\n\n    const handleTransaction = useCallback(async (tx: string) => {\n        console.log('handling transaction')\n        try {\n            await wcs.customAction({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(tx).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n                method: 'provenance_sendTransaction',\n            })\n        } catch (e) {\n    \n        }\n    }, [wcs])\n\n    // todo: listeners to close\n\n    useEffect(() => {\n        if (transaction) {\n            handleTransaction(transaction.txRaw)\n        }\n    }, [transaction, handleTransaction])\n\n    useEffect(() => {\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, (res) => {\n            console.log('CUSTOM_ACTION_COMPLETE', res)\n            setTransaction()\n        })\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, (res) => {\n            console.log('CUSTOM_ACTION_FAILED', res)\n            setTransaction()\n            setError(`Transaction Error: ${res.error}`)\n        })\n        console.log('listeners registered')\n        return () => wcs.removeAllListeners()\n    }, [setTransaction, wcs, setError])\n\n    if (!transaction) {\n        return <></>\n    }\n\n    return <Modal requestClose={() => {}}>\n        <H1 style={{ marginTop: 0 }}>Open Provenance Wallet to sign transaction</H1>\n        <H2>Transaction Message</H2>\n        <pre>\n            {transaction.txPretty}\n        </pre>\n    </Modal>\n}","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n\n    toJsonPretty(): string {\n        return JSON.stringify(this, undefined, 2)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        qualifier?: AssetQualifier\n    } = {}\n\n    static fromAssetType(asset_type: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setAssetType(asset_type)\n    }\n\n    static fromScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        return new QueryAssetDefinition().setScopeSpecAddress(scope_spec_address)\n    }\n\n    setAssetType(asset_type: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'asset_type',\n            value: asset_type,\n        }\n        return this\n    }\n\n    setScopeSpecAddress(scope_spec_address: string): QueryAssetDefinition {\n        this.query_asset_definition.qualifier = {\n            type: 'scope_spec_address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport type AssetQualifier = AssetTypeAssetQualifier | ScopeSpecAddressAssetQualifier\n\nexport interface AssetTypeAssetQualifier {\n    type: 'asset_type',\n    value: string\n}\n\nexport interface ScopeSpecAddressAssetQualifier {\n    type: 'scope_spec_address',\n    value: string\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    scope_spec_address: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    scope_spec_identifier: ScopeSpecIdentifier,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        scope_spec_identifier: {\n            type: 'address',\n            value: assetDefinition.scope_spec_address\n        },\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport type ScopeSpecIdentifier = UuidScopeSpecIdentifier | AddressScopeSpecIdentifier\n\nexport interface UuidScopeSpecIdentifier {\n    type: 'uuid',\n    value: string,\n}\n\nexport interface AddressScopeSpecIdentifier {\n    type: 'address',\n    value: string,\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        scope_spec_address: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    address: string,\n    onboarding_cost: string,\n    onboarding_denom: string,\n    fee_percent: string,\n    fee_destinations: FeeDestination[],\n    entity_detail?: EntityDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_percent: '0',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_percent: string,\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): UpdateAssetDefinition {\n        this.update_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setScopeSpecUuid(scope_spec_uuid: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'uuid',\n            value: scope_spec_uuid,\n        }\n        return this\n    }\n    \n    setScopeSpecAddress(scope_spec_address: string): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.scope_spec_identifier = {\n            type: 'address',\n            value: scope_spec_address,\n        }\n        return this\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport interface QueryAssetDefinitionsResponse {\n    asset_definitions: QueryAssetDefinitionResponse[]\n}\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: 100%;\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable ?\n            <Input value={value} {...rest} /> :\n            <DisplayWrapper>{value}</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","import { FunctionComponent, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FeeDestination } from \"../../models\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\n\nconst FeeDestinationWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    handleChange: () => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, handleChange, requestRemoval }) => {\n    const [params, setParams] = useState({\n        address: destination.address,\n        fee_percent: destination.fee_percent\n    })\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (destination as any)[key] = value\n        handleChange()\n    }\n\n    return <FeeDestinationWrapper>\n        <InputOrDisplay label=\"Address\" value={destination.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n        <InputOrDisplay label=\"Fee Percent\" value={destination.fee_percent} editable={editable} onChange={(e) => { updateParam('fee_percent', e.target.value) }} />\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n    </FeeDestinationWrapper>\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, EntityDetail } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button } from \"../Button\"\nimport { H5 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\n\nconst AssetVerifierWrapper = styled.div`\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    service: AssetClassificationContractService\n}\n\nconst intitialState = (verifier: VerifierDetail) => ({\n    address: verifier.address,\n    onboardingCost: `${verifier.onboarding_cost}${verifier.onboarding_denom}`,\n    fee_percent: verifier.fee_percent,\n    fee_destinations: verifier.fee_destinations\n})\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, service }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n    const [originalVerifier, setOriginalVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(`${verifier.onboarding_cost}${verifier.onboarding_denom}`)\n\n    const [params, setParams] = useState(intitialState(verifier))\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (verifier as any)[key] = value\n        handleChange()\n    }\n\n    useEffect(() => {\n        setOriginalVerifier(deepcopy(verifier))\n        setParams(intitialState(verifier))\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n    }, [verifier])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(verifier, originalVerifier, { strict: true }))\n    }\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        verifier.onboarding_cost = (match?.groups && match.groups['cost']) || '0'\n        verifier.onboarding_denom = (match?.groups && match.groups['denom']) || ''\n        setOnboardingCost(`${verifier.onboarding_cost}${verifier.onboarding_denom}`)\n        handleChange()\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const addFeeDestination = () => {\n        const newFeeDestination = {\n            address: '',\n            fee_percent: '',\n        }\n        updateParam('fee_destinations', [...params.fee_destinations, newFeeDestination])\n    }\n\n    return <AssetVerifierWrapper>\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={params.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <AssetVerifierDetail detail={verifier.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n            <InputOrDisplay label=\"Fee Percent\" type=\"number\" min=\"0\" value={params.fee_percent} editable={editable} onChange={(e) => { updateParam('fee_percent', e.target.value) }} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <H5>Fee Destinations {editable && <AddButton onClick={addFeeDestination} style={{float: \"right\"}} title=\"Add Fee Destination\" />}</H5>\n            {verifier.fee_destinations.length === 0 ? 'No Fee Destinations' : verifier.fee_destinations.map(destination => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} handleChange={handleChange} requestRemoval={() => updateParam('fee_destinations', params.fee_destinations.filter(d => d !== destination))} />)}\n        </FeeDestinations>\n        {!creating && editable && dirty && <ActionContainer><Button onClick={handleUpdate}>Update</Button></ActionContainer>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\ninterface AssetVerifierDetailProps {\n    detail: EntityDetail,\n    editable: boolean,\n    handleChange: () => any\n}\n\nconst initialState = (entityDetail: EntityDetail) => ({\n    name: entityDetail.name,\n    description: entityDetail.description,\n    home_url: entityDetail.home_url,\n    source_url: entityDetail.source_url,\n})\n\nconst AssetVerifierDetail: FunctionComponent<AssetVerifierDetailProps> = ({ detail, editable, handleChange }) => {\n\n    const [params, setParams] = useState(initialState(detail))\n\n    useEffect(() => {\n        setParams(initialState(detail))\n\n    }, [detail])\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (detail as any)[key] = value\n        handleChange()\n    }\n\n    return <>   \n        <InputOrDisplay label=\"Name\" value={params.name} editable={editable} onChange={(e) => { updateParam('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={params.description} editable={editable} onChange={(e) => updateParam('description', e.target.value)} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={params.home_url} editable={editable} onChange={(e) => { updateParam('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={params.source_url} editable={editable} onChange={(e) => { updateParam('source_url', e.target.value) }} />\n    </>\n}\n\nconst FeeDestinations = styled.div`\n`","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\n\nconst DefinitionWrapper = styled.div<{ border: boolean }>`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: ${({ border }) => border && `1px solid ${DARK_BG}`};\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    service: AssetClassificationContractService,\n}\n\nconst initialState = (definition: QueryAssetDefinitionResponse) => ({\n    asset_type: definition.asset_type,\n    scope_spec_address: definition.scope_spec_address,\n    verifiers: definition.verifiers,\n})\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, service }) => {\n\n    // todo: edit handler at this level for individual asset definition\n    const { walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n\n    const [dirty, setDirty] = useState(false)\n    const [originalDefinition, setOriginalDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName] = useState(true) // todo: add bind name checkbox\n\n    const [params, setParams] = useState(initialState(definition))\n\n    useEffect(() => {\n        setOriginalDefinition(deepcopy(definition))\n        setParams(initialState(definition))\n    }, [definition])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(definition, originalDefinition, { strict: true }))\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (definition as any)[key] = value\n        handleChange()\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(definition, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(definition, bindName, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateParam('verifiers', [...params.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    return <DefinitionWrapper border={!creating}>\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={definition.asset_type} editable={creating} onChange={(e) => { updateParam('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Scope Spec Address\" editable={editable} value={definition.scope_spec_address} onChange={(e) => { updateParam('scope_spec_address', e.target.value) }} />\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${params.asset_type}`}/>}</H4>\n            {definition.verifiers.length === 0 ? 'No Asset Verifiers' : definition.verifiers.map(verifier => <AssetVerifier key={verifier.address} asset_type={definition.asset_type} verifier={verifier} editable={editable} service={service} />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && <ActionContainer><Button onClick={handleUpdate}>Update</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={definition.asset_type} verifier={verifierToAdd} editable creating service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useInvalidateAssetDefinitions, useIsAdmin, useTransaction } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3 } from \"../Headers\";\nimport { AddButton } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n    const [transaction] = useTransaction()\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    useEffect(() => {\n        if (!transaction) {\n            invalidateAssetDefinitions()\n        }\n    }, [transaction, invalidateAssetDefinitions])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} service={service} />)}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating service={service} /></Modal>}\n    </div>\n}\n\n","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    \n    return <>\n        <Wrapper>\n            <div>\n                {walletConnectState.connected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={walletConnectState.connected ? wcs.disconnect : wcs.connect}>\n                {walletConnectState.connected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import { FunctionComponent, MouseEventHandler } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\nimport { useError } from \"../../hooks\";\nimport { RemoveButton } from \"../Button\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 20px;\n    min-width: 300px;\n    max-width: 90%;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    background: ${WHACKY_ACCENT_2};\n    border: 1px solid ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border-bottom: none;\n    font-weight: bold;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 1rem;\n`\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`\n\nexport interface ErrorPopupProps {\n    \n}\n\nexport const ErrorPopup: FunctionComponent<ErrorPopupProps> = () => {\n    const [error, setError] = useError()\n\n    const closePopup: MouseEventHandler<HTMLElement> = (e) => {\n        e.stopPropagation()\n        setError()\n    }\n\n    if (!error) {\n        return <></>\n    }\n\n    return <Overlay onClick={closePopup}>\n        <Wrapper onClick={(e) => e.stopPropagation()}>\n            <CloseButton onClick={closePopup} />\n            {error}\n        </Wrapper>\n    </Overlay>\n}","import './App.css';\nimport { BrowserRouter, Navigate, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { WalletContextProvider } from '@provenanceio/wallet-lib';\nimport { useSetNetwork, useNetworkConfig } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\nimport { TransactionHandler } from './components/TransactionHandler';\nimport { ErrorPopup } from './components/Popup';\n\nfunction App() {\n  const networkConfig = useNetworkConfig()\n\n  return <WalletConnectContextProvider network={networkConfig.network}>\n      <WalletContextProvider \n        grpcServiceAddress={networkConfig.grpcUrl}\n        walletUrl={networkConfig.walletUrl}>\n        <BrowserRouter basename='frontend-asset-classification'>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n            <Route path=\"*\" element={<Navigate to=\"/testnet\" />} />\n          </Routes>\n        </BrowserRouter>\n      </WalletContextProvider>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    wcs.setNetwork(network || 'mainnet')\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n      <TransactionHandler />\n      <ErrorPopup />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\nimport { RemoveButton } from \"../Button\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: min(1200px, 90%);\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n    position: relative;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    font-size: 1rem;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n`\n\ninterface ModalProps {\n    closeable?: boolean,\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose, closeable = true }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {closeable && <CloseButton onClick={requestClose} />}\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}"],"sourceRoot":""}