{"version":3,"sources":["services/WasmService.ts","components/Button/Button.tsx","components/Button/IconButton.tsx","components/Button/ActionContainer.tsx","services/AssetClassificationContractService.ts","hooks/useNetworkConfig.ts","hooks/useAssetClassificationService.ts","hooks/useAssetDefinitions.ts","hooks/useAssetClassificationConfig.ts","hooks/useIsAdmin.ts","hooks/useTransaction.ts","hooks/useError.ts","components/TransactionHandler/TransactionHandler.tsx","models/ContractBase.ts","models/AssetClassificationContract.ts","components/Headers/index.tsx","components/Page/PageWrapper.tsx","components/Layout/TwoColumn.tsx","components/Input/Input.tsx","components/Input/InputOrDisplay.tsx","components/AssetClassification/EntityDetailDisplay.tsx","components/AssetClassification/FeeDestination.tsx","components/AssetClassification/Verifier.tsx","components/AssetClassification/Definition.tsx","components/Page/AssetTypeConfig.tsx","components/Login/Login.tsx","components/Warning/index.tsx","components/ContractConfig/ContractConfig.tsx","components/NetworkSwitcher/NetworkSwitcher.tsx","components/Popup/ErrorPopup.tsx","App.tsx","index.tsx","components/Modal/Modal.tsx","constants/colors.ts","constants/network.ts","constants/asset.ts","constants/message.ts"],"names":["WasmService","grpcUrl","nameQueryClient","NameQueryClient","PROD_GRPC_URL","wasmQueryClient","WasmQueryClient","this","name","Promise","resolve","reject","QueryResolveRequest","setName","error","res","Error","code","message","getAddress","contractAddress","query","queryData","Buffer","from","JSON","stringify","toString","smartContractState","QuerySmartContractStateRequest","setAddress","setQueryData","parse","getData_asU8","Button","styled","button","secondary","DARK_BG","DARK_TEXT","LIGHT_TEXT","IconButtonBody","AddButton","props","RemoveButton","ActionContainer","div","AssetClassificationContractService","aliasName","wasmService","a","lookupContractByName","getContractAddress","QueryContractConfig","queryWasmCustom","QueryAssetDefinitions","assetDefinition","bindName","address","contractAddr","msg","AddAssetDefinition","setBindName","MsgExecuteContract","setMsg","toJson","setFundsList","setContract","setSender","txRaw","serializeBinary","txPretty","toJsonPretty","UpdateAssetDefinition","assetType","DeleteAssetDefinition","asset_type","verifier","UpdateAssetVerifier","setAssetType","setVerifier","AddAssetVerifier","network","getNetworkConfig","TEST_GRPC_URL","walletUrl","PROD_WALLET_URL","TEST_WALLET_URL","contractAlias","MAINNET_ASSET_CONTRACT_ALIAS_NAME","TESTNET_ASSET_CONTRACT_ALIAS_NAME","useNetworkConfig","paramNetwork","useParams","initialNetwork","networkOrDefault","useQuery","staleTime","Infinity","initialData","data","useSetNetwork","queryClient","useQueryClient","useCallback","newNetwork","invalidateQueries","useAssetClassificationService","networkConfig","useMemo","useAssetDefinitions","service","listAssetDefinitions","useInvalidateAssetDefinitions","useAssetClassificationConfig","getConfig","retry","useIsAdmin","walletConnectState","useWalletConnect","config","isLoading","admin","useTransaction","transaction","getQueryData","setTransaction","undefined","useError","setError","TransactionHandler","wcs","walletConnectService","invalidateAssetDefinitions","handleTransaction","tx","customAction","Any","setTypeUrl","MSG_EXECUTE_CONTRACT_TYPE","setValue","description","method","useEffect","completeListener","console","log","addListener","WINDOW_MESSAGES","CUSTOM_ACTION_COMPLETE","failedListener","CUSTOM_ACTION_FAILED","removeListener","closeable","requestClose","style","marginTop","ContractMsg","newAssetDefinitionInput","newAssetDefinitionInputFromAssetDefinition","display_name","verifiers","enabled","bind_name","newDefinition","newVerifier","onboarding_cost","onboarding_denom","fee_destinations","entity_detail","home_url","source_url","newEntityDetail","add_asset_definition","asset_definition","update_asset_definition","delete_asset_definition","update_asset_verifier","add_asset_verifier","query_asset_definitions","query_state","H1","h1","H2","h2","H3","h3","H4","h4","H5","h5","Body","LIGHT_BG","Content","PageWrapper","children","TwoColumnFlex","actionColumn","Input","input","type","InputOrDisplayWrapper","DisplayWrapper","MEDIUM_BG","Label","label","InputOrDisplay","editable","value","rest","disabled","initialState","entityDetail","EntityDetailDisplay","detail","handleChange","useState","params","setParams","updateParam","key","onChange","e","target","FeeDestinationControlWrapper","FeeDestinationContentWrapper","FeeDestinationDetails","destination","requestRemoval","fee_amount","onClick","AssetVerifierWrapper","AssetVerifierDetails","DeleteVerifierButton","getOnboardingCost","intitialState","onboardingCost","AssetVerifier","creating","definitionDirty","v","originalVerifier","setOriginalVerifier","dirty","setDirty","setOnboardingCost","deepEqual","strict","deepcopy","handleUpdate","getUpdateAssetVerifierMessage","handleCreate","getAddAssetVerifierMessage","title","cost","match","exec","groups","handleCostChange","FeeDestinations","float","length","map","filter","d","DefinitionWrapper","WHITE","border","DeleteDefinitionButton","DefinitionDetails","AssetVerifiers","definition","AssetDefinition","isNonVerifierDirty","setIsNonVerifierDirty","originalDefinition","setOriginalDefinition","verifierToAdd","setVerifierToAdd","verifierToRemove","setVerifierToRemove","deletingAssetDefinition","setDeletingAssetDefinition","calculateIsNonVerifierDirty","curr","original","originalDef","callback","getUpdateAssetDefinitionMessage","getAddAssetDefinitionMessage","handleDelete","getDeleteAssetDefinitionMessage","handleRemoveVerifier","clonedDefinition","checked","requestVerifierRemoval","Modal","AssetTypeConfig","assetDefinitions","isError","addingDefinition","setAddingDefinition","Wrapper","PRIMARY_ACCENT","PRIMARY_ACCENT_LIGHT","MyQRCodeModal","QRCodeModal","LoginManager","connected","disconnect","connect","Warning","WHACKY_ACCENT_2","adminBadgeAnimation","keyframes","WHACKY_ACCENT","AdminBadge","ContractConfig","isAdmin","base_contract_name","is_test","NetworkSwitcherWrapper","NetworkSwitcher","navigate","useNavigate","toggleNetwork","checkedIcon","uncheckedIcon","CloseButton","Overlay","ErrorPopup","closePopup","stopPropagation","AppContent","location","useLocation","setNetwork","path","element","display","justifyContent","App","grpcServiceAddress","basename","to","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById","ModalOverlay","TRANSPARENT_DARK_BG","ModalContainer","RICH_BLACK","CULTURED_GRAY"],"mappings":"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","file":"static/js/main.1542ebc6.chunk.js","sourcesContent":["import { Error as ServerError } from 'grpc-web';\nimport { QueryClient as WasmQueryClient } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_grpc_web_pb\";\nimport { QuerySmartContractStateRequest } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/query_pb\";\nimport { QueryClient as NameQueryClient } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_grpc_web_pb\";\nimport { QueryResolveRequest } from \"@provenanceio/wallet-lib/lib/proto/provenance/name/v1/query_pb\";\nimport { PROD_GRPC_URL } from '../constants';\n\nexport class WasmService {\n    nameQueryClient: NameQueryClient = new NameQueryClient(PROD_GRPC_URL, null)\n    wasmQueryClient: WasmQueryClient = new WasmQueryClient(PROD_GRPC_URL, null)\n    \n    constructor(grpcUrl: string) {\n        this.nameQueryClient = new NameQueryClient(grpcUrl, null)\n        this.wasmQueryClient = new WasmQueryClient(grpcUrl, null)\n    }\n\n    lookupContractByName(name: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.nameQueryClient.resolve(new QueryResolveRequest().setName(name), null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.lookupContractByName error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(res.getAddress())\n                }\n            })\n        })\n    }\n\n    queryWasmCustom<T, R>(contractAddress: string, query: T): Promise<R> {\n        return new Promise((resolve, reject) => {\n            const queryData = Buffer.from(JSON.stringify(query), \"utf-8\").toString(\"base64\")\n            this.wasmQueryClient.smartContractState(new QuerySmartContractStateRequest()\n                .setAddress(contractAddress)\n                .setQueryData(queryData)\n                , null, (error: ServerError, res) => {\n                if (error) {\n                    reject(new Error(`wasmService.queryWasmCustom error: Code: ${error.code} Message: ${error.message}`))\n                } else {\n                    resolve(JSON.parse(Buffer.from(res.getData_asU8()).toString('utf-8')))\n                }\n            })\n        })\n    }\n}","import styled from \"styled-components\"\nimport { DARK_BG, DARK_TEXT, LIGHT_TEXT } from \"../../constants\"\n\nexport interface ButtonProps {\n    secondary?: boolean\n}\n\nexport const Button = styled.button<ButtonProps>`\n    padding: 10px 20px;\n    background: ${({ secondary }) => secondary ? 'transparent' : DARK_BG};\n    color: ${({ secondary }) => secondary ? DARK_TEXT : LIGHT_TEXT};\n    border: ${({ secondary }) => secondary ? `1px solid ${DARK_TEXT}` :'none'};\n    border-radius: 5px;\n    cursor: pointer;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_BG, LIGHT_TEXT } from \"../../constants\"\n\nexport const IconButtonBody = styled.button`\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n    font-size: 1.5rem;\n    vertical-align: middle;\n    border: none;\n    background: ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    cursor: pointer;\n    &:hover {\n        opacity: .8;\n    }\n    &:disabled {\n        opacity: .5;\n        cursor: not-allowed;\n    }\n`\nexport const AddButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>+</IconButtonBody>\nexport const RemoveButton: FunctionComponent<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => <IconButtonBody {...props}>x</IconButtonBody>","import styled from \"styled-components\";\n\nexport const ActionContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 10px;\n    > *:not(:last-child) {\n        margin-right: 10px;\n    }\n`","import { MsgExecuteContract } from \"@provenanceio/wallet-lib/lib/proto/cosmwasm/wasm/v1/tx_pb\"\nimport { PROD_GRPC_URL } from \"../constants\"\nimport { TransactionMeta } from \"../hooks\"\nimport { AddAssetDefinition, AddAssetVerifier, DeleteAssetDefinition, QueryAssetDefinitionResponse, QueryAssetDefinitions, QueryAssetDefinitionsResponse, QueryContractConfig, QueryContractConfigResponse, UpdateAssetDefinition, UpdateAssetVerifier, VerifierDetail } from \"../models\"\nimport { WasmService } from \"./WasmService\"\n\nexport class AssetClassificationContractService {\n    wasmService = new WasmService(PROD_GRPC_URL)\n    contractAddress: string | null = null\n\n    constructor(grpcUrl: string, public aliasName: string) {\n        this.wasmService = new WasmService(grpcUrl)\n    }\n\n    async getContractAddress(): Promise<string> {\n        if (this.contractAddress != null) {\n            return this.contractAddress\n        }\n        this.contractAddress = await this.wasmService.lookupContractByName(this.aliasName)\n        return this.contractAddress\n    }\n\n    async getConfig(): Promise<QueryContractConfigResponse> {\n        return this.wasmService.queryWasmCustom<QueryContractConfig, QueryContractConfigResponse>(await this.getContractAddress(), new QueryContractConfig())\n    }\n\n    async listAssetDefinitions(): Promise<QueryAssetDefinitionsResponse> {\n        return this.wasmService.queryWasmCustom<QueryAssetDefinitions, QueryAssetDefinitionsResponse>(await this.getContractAddress(), new QueryAssetDefinitions())\n    }\n\n    async getAddAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, bindName: boolean, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetDefinition(assetDefinition)\n            .setBindName(bindName)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetDefinitionMessage(assetDefinition: QueryAssetDefinitionResponse, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetDefinition(assetDefinition)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getDeleteAssetDefinitionMessage(assetType: string, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new DeleteAssetDefinition(assetType)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getUpdateAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new UpdateAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n\n    async getAddAssetVerifierMessage(asset_type: string, verifier: VerifierDetail, address: string): Promise<TransactionMeta> {\n        const contractAddr = await this.getContractAddress()\n        const msg = new AddAssetVerifier()\n            .setAssetType(asset_type)\n            .setVerifier(verifier)\n        const message = new MsgExecuteContract()\n            .setMsg(Buffer.from(msg.toJson(), 'utf-8').toString('base64'))\n            .setFundsList([])\n            .setContract(contractAddr)\n            .setSender(address);\n        \n        return {\n            txRaw: Buffer.from(message.serializeBinary()).toString(\"base64\"),\n            txPretty: msg.toJsonPretty(),\n        };\n    }\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\nimport { useParams } from \"react-router\"\nimport { MAINNET_ASSET_CONTRACT_ALIAS_NAME, NetworkOptions, networkOrDefault, PROD_GRPC_URL, PROD_WALLET_URL, TESTNET_ASSET_CONTRACT_ALIAS_NAME, TEST_GRPC_URL, TEST_WALLET_URL } from \"../constants\"\n\nlet network: NetworkOptions = 'mainnet' // todo: pull from and save to localstorage?\ninterface NetworkConfig {\n    network: NetworkOptions,\n    grpcUrl: string,\n    walletUrl: string,\n    contractAlias: string,\n}\n\nconst getNetworkConfig = (network: NetworkOptions): NetworkConfig => ({\n    network,\n    grpcUrl: network === 'mainnet' ? PROD_GRPC_URL : TEST_GRPC_URL,\n    walletUrl: network === 'mainnet' ? PROD_WALLET_URL : TEST_WALLET_URL,\n    contractAlias: network === 'mainnet' ? MAINNET_ASSET_CONTRACT_ALIAS_NAME : TESTNET_ASSET_CONTRACT_ALIAS_NAME,\n})\n\nexport const useNetworkConfig = (): NetworkConfig => {\n    const { network: paramNetwork } = useParams()\n    const initialNetwork = networkOrDefault(paramNetwork)\n    const networkConfig = useQuery(['network'], () => getNetworkConfig(network), { staleTime: Infinity, initialData: getNetworkConfig(initialNetwork) })\n    return networkConfig.data as NetworkConfig\n}\n\nexport const useSetNetwork = () => {\n    const queryClient = useQueryClient()\n    return useCallback((newNetwork?: string) => {\n        network = networkOrDefault(newNetwork)\n        queryClient.invalidateQueries('network')\n    }, [queryClient])\n}","import { useMemo } from \"react\"\nimport { AssetClassificationContractService } from \"../services\"\nimport { useNetworkConfig } from \"./useNetworkConfig\"\n\nexport const useAssetClassificationService = () => {\n    const networkConfig = useNetworkConfig()\n\n    return useMemo(() => {\n        return new AssetClassificationContractService(networkConfig.grpcUrl, networkConfig.contractAlias)\n    }, [networkConfig])\n}","import { useCallback } from 'react'\nimport { useQuery, useQueryClient } from 'react-query'\nimport { useAssetClassificationService } from './useAssetClassificationService'\nimport { useNetworkConfig } from './useNetworkConfig'\n\nexport const useAssetDefinitions = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-definitions'], async () => {\n        return await service.listAssetDefinitions()\n    }, {\n        staleTime: Infinity\n    })\n}\n\nexport const useInvalidateAssetDefinitions = () => {\n    const queryClient = useQueryClient()\n    const networkConfig = useNetworkConfig()\n\n    return useCallback(() => {\n        queryClient.invalidateQueries(['network', networkConfig.network, 'asset-definitions'])\n    }, [queryClient, networkConfig.network])\n}","import { useQuery } from \"react-query\";\nimport { useAssetClassificationService } from \"./useAssetClassificationService\";\nimport { useNetworkConfig } from \"./useNetworkConfig\";\n\nexport const useAssetClassificationConfig = () => {\n    const networkConfig = useNetworkConfig()\n    const service = useAssetClassificationService()\n    return useQuery(['network', networkConfig.network, 'asset-classification-config'], async () => {\n        return await service.getConfig()\n    }, {\n        staleTime: Infinity,\n        retry: false\n    })\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport { useAssetClassificationConfig } from \"./useAssetClassificationConfig\"\n\nexport const useIsAdmin = () => {\n    const { walletConnectState } = useWalletConnect()\n    const { data: config, isLoading } = useAssetClassificationConfig()\n    \n    return !isLoading && config?.admin === walletConnectState.address\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport interface TransactionMeta {\n    txRaw: string,\n    txPretty: string,\n}\n\nexport const useTransaction = (): [TransactionMeta | undefined, (tx?: TransactionMeta | undefined) => void] => {\n    const queryClient = useQueryClient()\n    const { data: transaction } = useQuery(['transaction'], () => {\n        return queryClient.getQueryData<TransactionMeta>(['transaction'])\n    })\n\n    const setTransaction = useCallback((transaction: TransactionMeta | undefined = undefined) => {\n        queryClient.setQueryData(['transaction'], transaction)\n    }, [queryClient])\n\n    return [transaction, setTransaction]\n}","import { useCallback } from \"react\"\nimport { useQuery, useQueryClient } from \"react-query\"\n\nexport type Error = string | undefined\n\nexport const useError = (): [Error, (error?: Error) => void] => {\n    const queryClient = useQueryClient()\n    const {data: error} = useQuery(['error'], () => {\n        return queryClient.getQueryData<string>(['error'])\n    })\n\n    const setError = useCallback((error: Error) => {\n        queryClient.setQueryData(['error'], error)\n    }, [queryClient])\n\n    return [error, setError]\n}","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\nimport { BroadcastResults } from \"@provenanceio/walletconnect-js/lib/types\";\nimport { BaseResults } from \"@provenanceio/walletconnect-js/lib/types/BaseResults\";\nimport { Any } from \"google-protobuf/google/protobuf/any_pb\";\nimport { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { MSG_EXECUTE_CONTRACT_TYPE } from \"../../constants\";\nimport { useError, useInvalidateAssetDefinitions, useTransaction } from \"../../hooks\";\nimport { H1, H2 } from \"../Headers\";\nimport { Modal } from \"../Modal\";\n\nexport interface TransactionHandlerProps {\n    \n}\n\nexport const TransactionHandler: FunctionComponent<TransactionHandlerProps> = () => {\n    const [transaction, setTransaction] = useTransaction()\n    const [, setError] = useError()\n    const { walletConnectService: wcs } = useWalletConnect()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n\n    const handleTransaction = useCallback(async (tx: string) => {\n        try {\n            await wcs.customAction({\n                message: Buffer.from(new Any().setTypeUrl(MSG_EXECUTE_CONTRACT_TYPE).setValue(tx).serializeBinary()).toString('base64'),\n                description: MSG_EXECUTE_CONTRACT_TYPE,\n                method: 'provenance_sendTransaction',\n            })\n        } catch (e) {\n    \n        }\n    }, [wcs])\n\n    // todo: listeners to close\n\n    useEffect(() => {\n        if (transaction) {\n            handleTransaction(transaction.txRaw)\n        }\n    }, [transaction, handleTransaction])\n\n    useEffect(() => {\n        const completeListener = (res: BroadcastResults) => {\n            console.log('CUSTOM_ACTION_COMPLETE', res)\n            setTransaction()\n            invalidateAssetDefinitions()\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n        const failedListener = (res: BaseResults) => {\n            console.log('CUSTOM_ACTION_FAILED', res)\n            setTransaction()\n            setError(`Transaction Error: ${res.error}`)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        console.log('listeners registered')\n        return () => {\n            console.log('removing listeners')\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, completeListener)\n            wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_FAILED, failedListener)\n        }\n    }, [setTransaction, wcs, setError, invalidateAssetDefinitions])\n\n    if (!transaction) {\n        return <></>\n    }\n\n    return <Modal closeable={false} requestClose={() => {}}>\n        <H1 style={{ marginTop: 0 }}>Open Provenance Wallet to sign transaction</H1>\n        <H2>Transaction Message</H2>\n        <pre>\n            {transaction.txPretty}\n        </pre>\n    </Modal>\n}","export class ContractMsg {\n    toJson(): string {\n        return JSON.stringify(this)\n    }\n\n    toJsonPretty(): string {\n        return JSON.stringify(this, undefined, 2)\n    }\n}","import { ContractMsg } from \"./ContractBase\"\n\nexport class QueryAssetDefinition {\n    public query_asset_definition: {\n        asset_type?: String\n    } = {}\n\n    constructor(asset_type: string) {\n        this.query_asset_definition.asset_type = asset_type\n    }\n}\n\nexport interface QueryAssetDefinitionResponse {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n}\n\nexport interface AssetDefinitionInput {\n    asset_type: string,\n    display_name: string,\n    verifiers: VerifierDetail[],\n    enabled: boolean,\n    bind_name?: boolean,\n}\n\nexport function newAssetDefinitionInput(): AssetDefinitionInput {\n    return newAssetDefinitionInputFromAssetDefinition(newDefinition())\n}\n\nexport function newAssetDefinitionInputFromAssetDefinition(assetDefinition: QueryAssetDefinitionResponse): AssetDefinitionInput {\n    return {\n        asset_type: assetDefinition.asset_type,\n        display_name: assetDefinition.display_name,\n        verifiers: assetDefinition.verifiers,\n        enabled: assetDefinition.enabled,\n        bind_name: true,\n    }\n}\n\nexport function newDefinition(): QueryAssetDefinitionResponse {\n    return {\n        asset_type: '',\n        display_name: '',\n        verifiers: [],\n        enabled: true,\n    }\n}\n\nexport interface VerifierDetail {\n    address: string,\n    onboarding_cost: string,\n    onboarding_denom: string,\n    fee_destinations: FeeDestination[],\n    entity_detail?: EntityDetail,\n}\n\nexport function newVerifier(): VerifierDetail {\n    return {\n        address: '',\n        onboarding_cost: '0',\n        onboarding_denom: 'nhash',\n        fee_destinations: [],\n        entity_detail: newEntityDetail()\n    }\n}\n\nexport function newEntityDetail(): EntityDetail {\n    return {\n        name: '',\n        description: '',\n        home_url: '',\n        source_url: '',\n    }\n}\n\nexport interface FeeDestination {\n    address: string,\n    fee_amount: string,\n    entity_detail?: EntityDetail,\n}\n\nexport interface EntityDetail {\n    /// A short name describing the entity\n    name?: string,\n    /// A short description of the entity's purpose\n    description?: string,\n    /// A web link that can send observers to the organization that the verifier belongs to\n    home_url?: string,\n    // A web link that can send observers to the source code of the verifier, for increased transparency\n    source_url?: string,\n}\n\nexport class OnboardAsset extends ContractMsg {\n    onboard_asset: {\n        identifier?: AssetIdentifier,\n        asset_type?: string,\n        verifier_address?: string,\n        access_routes?: AccessRoute[]\n    } = {}\n\n    setAssetUuid(asset_uuid: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'asset_uuid',\n            value: asset_uuid,\n        }\n        return this\n    }\n\n    setScopeAddress(scope_address: string): OnboardAsset {\n        this.onboard_asset.identifier = {\n            type: 'scope_address',\n            value: scope_address,\n        }\n        return this\n    }\n    \n    setAssetType(asset_type: string): OnboardAsset {\n        this.onboard_asset.asset_type = asset_type\n        return this\n    }\n\n    setVerifierAddress(verifier_address: string): OnboardAsset {\n        this.onboard_asset.verifier_address = verifier_address\n        return this\n    }\n\n    addAccessRoute(route: string, name?: string): OnboardAsset {\n        this.onboard_asset.access_routes = [\n            ...(this.onboard_asset.access_routes || []),\n            { route, name },\n        ]\n        return this\n    }\n}\n\nexport class AddAssetDefinition extends ContractMsg {\n    add_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.add_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n    }\n\n    setBindName(bindName: boolean): AddAssetDefinition {\n        this.add_asset_definition.asset_definition.bind_name = bindName\n        return this\n    }\n}\n\nexport class UpdateAssetDefinition extends ContractMsg {\n    update_asset_definition = {\n        asset_definition: newAssetDefinitionInput()\n    }\n\n    constructor(assetDefinition: QueryAssetDefinitionResponse = newDefinition()) {\n        super()\n        this.update_asset_definition.asset_definition = newAssetDefinitionInputFromAssetDefinition(assetDefinition)\n        delete this.update_asset_definition.asset_definition.bind_name\n    }\n}\n\nexport class DeleteAssetDefinition extends ContractMsg {\n    delete_asset_definition: {\n        asset_type?: String,\n    } = {}\n\n    constructor(asset_type: string) {\n        super()\n        this.delete_asset_definition.asset_type = asset_type\n    }\n}\n\nexport class UpdateAssetVerifier extends ContractMsg {\n    update_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): UpdateAssetVerifier {\n        this.update_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): UpdateAssetVerifier {\n        this.update_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport class AddAssetVerifier extends ContractMsg {\n    add_asset_verifier: {\n        asset_type?: string,\n        verifier?: VerifierDetail\n    } = {}\n\n    setAssetType(asset_type: string): AddAssetVerifier {\n        this.add_asset_verifier.asset_type = asset_type\n        return this\n    }\n\n    setVerifier(verifier: VerifierDetail): AddAssetVerifier {\n        this.add_asset_verifier.verifier = verifier\n        return this\n    }\n}\n\nexport type AssetIdentifier = AssetUuidAssetIdentifier | ScopeAddressAssetIdentifier\n\nexport interface AssetUuidAssetIdentifier {\n    type: 'asset_uuid',\n    value: string,\n}\n\nexport interface ScopeAddressAssetIdentifier {\n    type: 'scope_address',\n    value: string,\n}\n\nexport interface AccessRoute {\n    route: string,\n    name?: string\n}\n\nexport class QueryAssetDefinitions {\n    public query_asset_definitions = {}\n}\n\nexport type QueryAssetDefinitionsResponse = QueryAssetDefinitionResponse[]\n\nexport class QueryContractConfig {\n    public query_state = {}\n}\n\nexport interface QueryContractConfigResponse {\n    base_contract_name: string,\n    admin: string,\n    is_test: boolean,\n}","import styled from \"styled-components\";\n\nexport const H1 = styled.h1``\nexport const H2 = styled.h2``\nexport const H3 = styled.h3``\nexport const H4 = styled.h4``\nexport const H5 = styled.h5``","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from 'styled-components'\nimport { LIGHT_BG } from \"../../constants\";\n\nconst Body = styled.div`\n    background: ${LIGHT_BG};\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    overflow-y: scroll;\n`\n\nconst Content = styled.div`\n    max-width: 1200px;\n    margin: 20px auto;\n`\n\ninterface PageWrapperProps {\n\n}\n\nexport const PageWrapper: FunctionComponent<PropsWithChildren<PageWrapperProps>> = ({children}) => <Body>\n    <Content>\n        {children}\n    </Content>\n</Body>","import styled from \"styled-components\";\n\nexport const TwoColumnGrid = styled.div<{ actionColumn: boolean }>`\n    display: grid;\n    grid-template-columns: 1fr 1fr ${({ actionColumn }) => actionColumn && 'auto'};\n`\n\nexport const TwoColumnFlex = styled.div`\n    display: flex;\n    justify-content: space-between;\n`","import styled from 'styled-components'\nimport { DARK_BG } from '../../constants'\n\nexport const Input = styled.input`\n    border: 1px solid ${DARK_BG};\n    display: block;\n    padding: 10px;\n    border-radius: 5px;\n    margin-right: 0;\n    width: ${({ type }) => type === 'checkbox' ? 'auto': '100%'};\n    box-sizing: border-box;\n`","import { FunctionComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { MEDIUM_BG } from \"../../constants\"\nimport { Input } from \"./Input\"\n\nexport const InputOrDisplayWrapper = styled.div`\n\n`\n\nexport const DisplayWrapper = styled.div`\n    padding: 10px;\n    background: ${MEDIUM_BG};\n    border-radius: 5px;\n`\n\nconst Label = styled.label`\n    display: block;\n`\n\nexport type InputOrDisplayProps = {\n    editable: boolean,\n    label: string\n} & React.InputHTMLAttributes<HTMLInputElement>\n\nexport const InputOrDisplay: FunctionComponent<InputOrDisplayProps> = ({editable, label, value,  ...rest}) => {\n    return <InputOrDisplayWrapper>\n        <Label>{label}</Label>\n        {editable || rest.type === 'checkbox' ?\n            <Input disabled={!editable} value={value} {...rest} /> :\n            value ? <DisplayWrapper>{value}</DisplayWrapper> : <DisplayWrapper>&nbsp;</DisplayWrapper>\n        }\n    </InputOrDisplayWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { EntityDetail } from \"../../models\"\nimport { InputOrDisplay } from \"../Input\";\n\ninterface EntityDetailProps {\n    detail: EntityDetail,\n    editable: boolean,\n    handleChange: () => any,\n}\n\nconst initialState = (entityDetail?: EntityDetail) => ({\n    name: entityDetail?.name || '',\n    description: entityDetail?.description || '',\n    home_url: entityDetail?.home_url || '',\n    source_url: entityDetail?.source_url || '',\n})\n\nexport const EntityDetailDisplay: FunctionComponent<EntityDetailProps> = ({ detail, editable, handleChange }) => {\n    const [params, setParams] = useState(initialState(detail));\n\n    useEffect(() => setParams(initialState(detail)), [detail]);\n\n    const updateParam = (key: string, value: string) => {\n        setParams({\n            ...params,\n            [key]: value,\n        });\n        (detail as any)[key] = value;\n        handleChange();\n    };\n\n    return <>\n        <InputOrDisplay label=\"Name\" value={params.name} editable={editable} onChange={(e) => { updateParam('name', e.target.value) }} />\n        <InputOrDisplay label=\"Description\" value={params.description} editable={editable} onChange={(e) => { updateParam('description', e.target.value) }} />\n        <InputOrDisplay label=\"Home URL\" type=\"url\" value={params.home_url} editable={editable} onChange={(e) => { updateParam('home_url', e.target.value) }} />\n        <InputOrDisplay label=\"Source URL\" type=\"url\" value={params.source_url} editable={editable} onChange={(e) => { updateParam('source_url', e.target.value) }} />\n    </>;\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { EntityDetail, FeeDestination, newEntityDetail } from \"../../models\";\nimport { RemoveButton } from \"../Button\";\nimport { InputOrDisplay } from \"../Input\";\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\";\n\nconst FeeDestinationControlWrapper = styled.div`\n    display: flex;\n    gap: 10px;\n    &:not(:last-child) {\n        padding-bottom: 25px;\n    }\n`;\n\nconst FeeDestinationContentWrapper = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n    width: 100%;\n    > * {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    }\n`\n\ninterface FeeDestinationDetailsProps {\n    destination: FeeDestination,\n    editable: boolean,\n    handleChange: () => any,\n    requestRemoval: () => any,\n}\n\nexport const FeeDestinationDetails: FunctionComponent<FeeDestinationDetailsProps> = ({ destination, editable, handleChange, requestRemoval }) => {\n    useEffect(() => {\n        if (!destination.entity_detail) {\n            destination.entity_detail = newEntityDetail();\n        }\n    }, [destination])\n\n    const [params, setParams] = useState({\n        address: destination.address,\n        fee_amount: destination.fee_amount,\n        entity_detail: destination.entity_detail,\n    })\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (destination as any)[key] = value\n        handleChange()\n    }\n\n    return <FeeDestinationControlWrapper>\n        {editable && <div><RemoveButton onClick={requestRemoval} /></div>}\n        <FeeDestinationContentWrapper>\n            <InputOrDisplay label=\"Address\" value={destination.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Fee Amount\" value={destination.fee_amount} editable={editable} onChange={(e) => { updateParam('fee_amount', e.target.value) }} />\n            <EntityDetailDisplay detail={destination.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n        </FeeDestinationContentWrapper>\n    </FeeDestinationControlWrapper>;\n}","import { useWalletConnect } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { DARK_TEXT } from \"../../constants\"\nimport { VerifierDetail, newEntityDetail, EntityDetail, FeeDestination } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H5 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { FeeDestinationDetails } from \"./FeeDestination\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\nimport { EntityDetailDisplay } from \"./EntityDetailDisplay\"\n\nconst AssetVerifierWrapper = styled.div`\n    position: relative;\n    margin-top: 20px;\n    padding-left: 20px;\n    border-left: 5px solid ${DARK_TEXT};\n    &:not(:last-of-type) {\n        padding-bottom: 10px;\n        /* border-bottom: 1px solid ${DARK_TEXT}; */\n    }\n`\n\nconst AssetVerifierDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n`\n\nconst DeleteVerifierButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: -2px;\n    font-size: 1rem;\n    transform: translate(-50%, -50%);\n`\n\ninterface AssetVerifierProps {\n    asset_type: string,\n    verifier: VerifierDetail,\n    editable: boolean,\n    creating?: boolean,\n    service: AssetClassificationContractService,\n    newDefinition?: boolean,\n    definitionDirty?: boolean,\n    requestRemoval?: () => any,\n    onChange?: (verifier: VerifierDetail) => any,\n}\n\nconst getOnboardingCost = (verifier: VerifierDetail): string => `${verifier.onboarding_cost}${verifier.onboarding_denom}`\n\nconst intitialState = (verifier: VerifierDetail) => ({\n    address: verifier.address,\n    onboardingCost: getOnboardingCost(verifier),\n    fee_destinations: verifier.fee_destinations\n})\n\n\nexport const AssetVerifier: FunctionComponent<AssetVerifierProps> = ({ asset_type, verifier, editable, creating = false, newDefinition, definitionDirty, service, onChange = (v) => {}, requestRemoval = () => {} }) => {\n    // todo: edit handler at this level for individual asset verifier update\n\n    const { walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n    const [originalVerifier, setOriginalVerifier] = useState(verifier)\n    const [dirty, setDirty] = useState(false)\n    const [onboardingCost, setOnboardingCost] = useState(getOnboardingCost(verifier))\n\n    const [params, setParams] = useState(intitialState(verifier))\n\n    const handleChange = () => {\n        setDirty(!deepEqual(verifier, originalVerifier, { strict: true }))\n        onChange(verifier)\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (verifier as any)[key] = value\n        handleChange()\n    }\n\n    useEffect(() => {\n        setOriginalVerifier(deepcopy(verifier))\n        setParams(intitialState(verifier))\n        setOnboardingCost(getOnboardingCost(verifier))\n        if (!verifier.entity_detail) {\n            verifier.entity_detail = newEntityDetail()\n        }\n    }, [verifier])\n\n    const handleCostChange = (cost: string) => {\n        const match = /(?<cost>[0-9]*)(?<denom>[a-zA-Z]*)/.exec(cost)\n        verifier.onboarding_cost = (match?.groups && match.groups['cost']) || '0'\n        verifier.onboarding_denom = (match?.groups && match.groups['denom']) || ''\n        setOnboardingCost(getOnboardingCost(verifier))\n        handleChange()\n    }\n\n    const handleUpdate = async() => {\n        const message = await service.getUpdateAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async() => {\n        const message = await service.getAddAssetVerifierMessage(asset_type, verifier, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const addFeeDestination = () => {\n        const newFeeDestination: FeeDestination = {\n            address: '',\n            fee_amount: '',\n        }\n        updateParam('fee_destinations', [...params.fee_destinations, newFeeDestination])\n    }\n\n    return <AssetVerifierWrapper>\n        {!creating && editable && <DeleteVerifierButton onClick={requestRemoval} title=\"Remove Asset Verifier\" />}\n        <AssetVerifierDetails>\n            <InputOrDisplay label=\"Verifier Address\" value={params.address} editable={editable} onChange={(e) => { updateParam('address', e.target.value) }} />\n            <InputOrDisplay label=\"Onboarding Cost\" value={onboardingCost} editable={editable} onChange={(e) => handleCostChange(e.target.value)} />\n            <EntityDetailDisplay detail={verifier.entity_detail as EntityDetail} editable={editable} handleChange={handleChange} />\n        </AssetVerifierDetails>\n        <FeeDestinations>\n            <H5>Fee Destinations {editable && <AddButton onClick={addFeeDestination} style={{float: \"right\"}} title=\"Add Fee Destination\" />}</H5>\n            {verifier.fee_destinations.length === 0 ? 'No Fee Destinations' : verifier.fee_destinations.map(destination => <FeeDestinationDetails key={destination.address} destination={destination} editable={editable} handleChange={handleChange} requestRemoval={() => updateParam('fee_destinations', params.fee_destinations.filter(d => d !== destination))} />)}\n        </FeeDestinations>\n        {!newDefinition && !creating && editable && dirty && !definitionDirty && <ActionContainer><Button onClick={handleUpdate}>Update Verifier</Button></ActionContainer>}\n        {!newDefinition && creating && <ActionContainer><Button onClick={handleCreate}>Add Verifier</Button></ActionContainer>}\n    </AssetVerifierWrapper>\n}\n\nconst FeeDestinations = styled.div`\n`","import { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\"\nimport deepcopy from \"deepcopy\"\nimport { FunctionComponent, useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WHITE, DARK_BG } from \"../../constants\"\nimport { QueryAssetDefinitionResponse, VerifierDetail, newVerifier } from \"../../models\"\nimport { AssetClassificationContractService } from \"../../services\"\nimport { ActionContainer, AddButton, Button, RemoveButton } from \"../Button\"\nimport { H4 } from \"../Headers\"\nimport { InputOrDisplay } from \"../Input\"\nimport { Modal } from \"../Modal\"\nimport { AssetVerifier } from \"./Verifier\"\nimport deepEqual from \"deep-equal\";\nimport { useTransaction } from \"../../hooks\"\n\nconst DefinitionWrapper = styled.div<{ border: boolean }>`\n    padding: 20px;\n    margin-bottom: 20px;\n    background: ${WHITE};\n    border-radius: 5px;\n    border: ${({ border }) => border && `1px solid ${DARK_BG}`};\n    position: relative;\n`\n\nconst DeleteDefinitionButton = styled(RemoveButton)`\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(-50%, -50%);\n`\n\nconst DefinitionDetails = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr auto;\n    grid-gap: 10px;\n`\n\nconst AssetVerifiers = styled.div`\n`\n\ninterface AssetDefinitionProps {\n    definition: QueryAssetDefinitionResponse\n    editable: boolean\n    creating?: boolean\n    service: AssetClassificationContractService,\n}\n\nconst initialState = (definition: QueryAssetDefinitionResponse) => ({\n    asset_type: definition.asset_type,\n    display_name: definition.display_name,\n    verifiers: definition.verifiers,\n    enabled: definition.enabled,\n})\n\nexport const AssetDefinition: FunctionComponent<AssetDefinitionProps> = ({ definition, editable, creating = false, service }) => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    const [, setTransaction] = useTransaction()\n\n\n    const [dirty, setDirty] = useState(false)\n    const [isNonVerifierDirty, setIsNonVerifierDirty] = useState(false)\n    const [originalDefinition, setOriginalDefinition] = useState(definition)\n    const [verifierToAdd, setVerifierToAdd] = useState<VerifierDetail | null>(null)\n    const [bindName, setBindName] = useState(true)\n    const [verifierToRemove, setVerifierToRemove] = useState<VerifierDetail>()\n    const [deletingAssetDefinition, setDeletingAssetDefinition] = useState(false)\n\n    const [params, setParams] = useState(initialState(definition))\n\n\n    const calculateIsNonVerifierDirty = (curr: QueryAssetDefinitionResponse, original: QueryAssetDefinitionResponse) => {\n        return !deepEqual({ ...curr, verifiers: [] }, { ...original, verifiers: [] })\n    }\n\n    useEffect(() => {\n        console.log('performing deep copy of', definition.asset_type)\n        const originalDef = deepcopy(definition)\n        setOriginalDefinition(originalDef)\n        setParams(initialState(definition))\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDef))\n    }, [definition])\n\n    useEffect(() => {\n        const callback = () => {\n            setVerifierToAdd(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const handleChange = () => {\n        setDirty(!deepEqual(definition, originalDefinition, { strict: true }))\n    }\n\n    const updateParam = (key: string, value: any) => {\n        setParams({\n            ...params,\n            [key]: value\n        });\n        (definition as any)[key] = value\n        handleChange()\n        setIsNonVerifierDirty(calculateIsNonVerifierDirty(definition, originalDefinition))\n    }\n\n    const handleUpdate = async () => {\n        const message = await service.getUpdateAssetDefinitionMessage(definition, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleCreate = async () => {\n        const message = await service.getAddAssetDefinitionMessage(definition, bindName, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleDelete = async () => {\n        const message = await service.getDeleteAssetDefinitionMessage(definition.asset_type, walletConnectState.address)\n        setTransaction(message)\n    }\n\n    const handleAdd = () => {\n        if (creating) {\n            updateParam('verifiers', [...params.verifiers, newVerifier()])\n        } else {\n            setVerifierToAdd(newVerifier())\n        }\n    }\n\n    const requestVerifierRemoval = (verifier: VerifierDetail) => {\n        setVerifierToRemove(verifier)\n    }\n\n    const handleRemoveVerifier = async (verifier: VerifierDetail) => {\n        const clonedDefinition = deepcopy(definition)\n        clonedDefinition.verifiers = clonedDefinition.verifiers.filter(v => v.address !== verifier.address)\n        const message = await service.getUpdateAssetDefinitionMessage(clonedDefinition, walletConnectState.address)\n        setTransaction(message)\n        setVerifierToRemove(undefined)\n    }\n\n    return <DefinitionWrapper border={!creating}>\n        {editable && !creating && <DeleteDefinitionButton title=\"Delete Asset Definition\" onClick={() => setDeletingAssetDefinition(true)} />}\n        <DefinitionDetails>\n            <InputOrDisplay label=\"Asset Type\" value={definition.asset_type} editable={creating} onChange={(e) => { updateParam('asset_type', e.target.value) }} />\n            <InputOrDisplay label=\"Display Name\" value={definition.display_name} editable={editable} onChange={(e) => { updateParam('display_name', e.target.value) }} />\n            <InputOrDisplay label=\"Enabled\" editable={editable} checked={params.enabled} value={`${definition.enabled}`} type=\"checkbox\" onChange={(e) => { updateParam('enabled', e.target.checked) }} />\n            {creating && <InputOrDisplay label=\"Bind Name\" editable checked={bindName} type=\"checkbox\" onChange={(e) => { setBindName(e.target.checked) }} />}\n        </DefinitionDetails>\n        <AssetVerifiers>\n            <H4>Asset Verifiers {editable && <AddButton onClick={handleAdd} style={{float: 'right'}} title={`Add Asset Verifier for ${params.asset_type}`}/>}</H4>\n            {definition.verifiers.length === 0 ? 'No Asset Verifiers' : definition.verifiers.map(verifier => <AssetVerifier key={verifier.address}\n                asset_type={definition.asset_type}\n                verifier={verifier}\n                editable={editable}\n                service={service}\n                newDefinition={creating}\n                definitionDirty={isNonVerifierDirty}\n                onChange={(verifier) => updateParam('verifiers', definition.verifiers.map(v => v.address === verifier.address ? verifier : v))}\n                requestRemoval={() => requestVerifierRemoval(verifier)}\n            />)}\n        </AssetVerifiers>\n        {!creating && editable && dirty && isNonVerifierDirty && <ActionContainer><Button onClick={handleUpdate}>Update Definition</Button></ActionContainer>}\n        {verifierToAdd && <Modal requestClose={() => setVerifierToAdd(null)}><AssetVerifier asset_type={definition.asset_type} verifier={verifierToAdd} editable creating service={service} /> </Modal>}\n        {creating && <ActionContainer><Button onClick={handleCreate}>Add Definition</Button></ActionContainer>}\n        {verifierToRemove && <Modal requestClose={() => setVerifierToRemove(undefined)}>\n            {`Are you sure you want to remove verifier for ${definition.asset_type} with address ${verifierToRemove.address}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setVerifierToRemove(undefined)}>Cancel</Button>\n                <Button onClick={() => handleRemoveVerifier(verifierToRemove)}>Yes, Remove Verifier</Button>\n            </ActionContainer>\n        </Modal>}\n        {editable && !creating && deletingAssetDefinition && <Modal requestClose={() => setDeletingAssetDefinition(false)}>\n            {`Are you sure you want to delete the asset definition for asset type ${definition.asset_type}?`}\n            <ActionContainer>\n                <Button secondary onClick={() => setDeletingAssetDefinition(false)}>Cancel</Button>\n                <Button onClick={handleDelete}>Yes, Delete Assset Definition</Button>\n            </ActionContainer>\n        </Modal>}\n    </DefinitionWrapper>\n}","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useAssetClassificationService, useAssetDefinitions, useInvalidateAssetDefinitions, useIsAdmin, useTransaction } from \"../../hooks\";\nimport { newDefinition, QueryAssetDefinitionResponse } from \"../../models\";\nimport { H3, H4 } from \"../Headers\";\nimport { AddButton } from \"../Button\";\nimport { Modal } from \"../Modal\";\nimport { TwoColumnFlex } from \"../Layout\";\nimport { AssetDefinition } from \"../AssetClassification\";\nimport { useWalletConnect, WINDOW_MESSAGES } from \"@provenanceio/walletconnect-js\";\n\ninterface AssetTypeConfigProps {\n}\n\nexport const AssetTypeConfig: FunctionComponent<AssetTypeConfigProps> = () => {\n    const { data: assetDefinitions, isLoading, isError } = useAssetDefinitions()\n    const invalidateAssetDefinitions = useInvalidateAssetDefinitions()\n    const isAdmin = useIsAdmin()\n    const editable = isAdmin\n    const [transaction] = useTransaction()\n    const { walletConnectService: wcs } = useWalletConnect()\n\n    const [addingDefinition, setAddingDefinition] = useState<QueryAssetDefinitionResponse | null>(null)\n    const service = useAssetClassificationService()\n\n    useEffect(() => {\n        if (!transaction) {\n            invalidateAssetDefinitions()\n        }\n    }, [transaction, invalidateAssetDefinitions])\n\n    useEffect(() => {\n        const callback = () => {\n            setAddingDefinition(null)\n        }\n        wcs.addListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n        return () => wcs.removeListener(WINDOW_MESSAGES.CUSTOM_ACTION_COMPLETE, callback)\n    }, [wcs])\n\n    const handleAdd = () => {\n        setAddingDefinition(newDefinition())\n    }\n\n    if (isLoading) {\n        <div>Loading</div>\n    }\n\n    if (isError) {\n        return <></>\n    }\n\n    return <div>\n        <H3><TwoColumnFlex>Asset Definitions {editable && <AddButton onClick={handleAdd} title=\"Add Asset Definition\" />}</TwoColumnFlex></H3>\n        {assetDefinitions?.map(definition => <AssetDefinition key={definition.asset_type} definition={definition} editable={editable} service={service} />)}\n        {!assetDefinitions?.length && <H4>No Asset Definitions</H4>}\n        {addingDefinition && <Modal requestClose={() => setAddingDefinition(null)}><AssetDefinition definition={addingDefinition} editable creating service={service} /></Modal>}\n    </div>\n}\n\n","import { QRCodeModal, useWalletConnect } from \"@provenanceio/walletconnect-js\";\nimport { FunctionComponent } from \"react\";\nimport styled from 'styled-components'\nimport { PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT } from \"../../constants\";\nimport { Button } from \"../Button\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    border: 1px solid ${PRIMARY_ACCENT};\n    background: ${PRIMARY_ACCENT_LIGHT};\n    border-radius: 5px;\n    justify-content: space-between;\n    align-items: center;\n`\n\ninterface LoginManagerProps {\n\n}\n\n// hack because the types for the QRCodeModal aren't correct\nconst MyQRCodeModal: React.FC<any> = QRCodeModal\n\nexport const LoginManager: FunctionComponent<LoginManagerProps> = () => {\n    const { walletConnectService: wcs, walletConnectState } = useWalletConnect()\n    \n    return <>\n        <Wrapper>\n            <div>\n                {walletConnectState.connected ? `Connected as: ${walletConnectState.address}` : 'Connect as contract admin for edit functionality'}\n            </div>\n            <Button onClick={walletConnectState.connected ? wcs.disconnect : wcs.connect}>\n                {walletConnectState.connected ? 'Disconnect Wallet' : 'Connect Wallet'}\n            </Button>\n        </Wrapper>\n        <MyQRCodeModal\n            walletConnectService={wcs}\n            walletConnectState={walletConnectState}\n            title=\"Scan to initiate walletConnect-js session\"\n          />\n    </>\n}","import styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\n\nexport const Warning = styled.div`\n    margin: 20px 0;\n    color: ${LIGHT_TEXT};\n    font-size: 1.5rem;\n    background: ${WHACKY_ACCENT_2};\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    border-radius: 5px;\n`","import { FunctionComponent } from \"react\";\nimport styled, { keyframes } from 'styled-components'\nimport { DARK_BG, PRIMARY_ACCENT, PRIMARY_ACCENT_LIGHT, WHACKY_ACCENT, WHACKY_ACCENT_2, WHITE } from \"../../constants\";\nimport { useAssetClassificationConfig, useIsAdmin } from \"../../hooks\";\nimport { H2 } from \"../Headers\";\nimport { Warning } from \"../Warning\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    line-height: 1.5rem;\n    background: ${WHITE};\n    padding: 20px;\n    border-radius: 5px;\n    border: 1px solid ${DARK_BG};\n`\n\nconst adminBadgeAnimation = keyframes`\n    0% {\n        background: ${PRIMARY_ACCENT};\n    }\n    25% {\n        background: ${WHACKY_ACCENT};\n    }\n    50% {\n        background: ${PRIMARY_ACCENT_LIGHT};\n    }\n    75% {\n        background: ${WHACKY_ACCENT_2};\n    }\n`\n\nconst AdminBadge = styled.div`\n    background: ${PRIMARY_ACCENT};\n    padding: 5px 10px;\n    border-radius: 5px;\n    display: inline-block;\n    animation: ${adminBadgeAnimation} 2s infinite;\n`\n\nexport interface ContractConfigProps {\n}\n\nexport const ContractConfig: FunctionComponent<ContractConfigProps> = () => {\n    const { data: config, isLoading, isError  } = useAssetClassificationConfig()\n    const isAdmin = useIsAdmin()\n\n    if (isLoading) {\n        return <></>\n    }\n\n    if (isError) {\n        return <Warning>Error Loading Contract Configuration</Warning>\n    }\n\n    return <div>\n        <H2>Contract Configuration</H2>\n        <Wrapper>\n            <div>\n                <div>Admin: {config?.admin}</div>\n                <div>Base Name: {config?.base_contract_name}</div>\n                <div>Is Test: {config?.is_test ? '✅': '❌'}</div>\n            </div>\n            <div>\n                {isAdmin && <AdminBadge>✅&nbsp;&nbsp;&nbsp;You ARE the Admin</AdminBadge>}\n            </div>\n        </Wrapper>\n    </div>\n}","import { useCallback } from \"react\"\nimport { useNavigate } from \"react-router\"\nimport styled from \"styled-components\"\nimport { useNetworkConfig } from \"../../hooks\"\nimport Switch from 'react-switch'\n\n\nexport const NetworkSwitcherWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 10px 0;\n`\n\nexport const NetworkSwitcher = () => {\n    const networkConfig = useNetworkConfig()\n    const navigate = useNavigate()\n\n    const toggleNetwork = useCallback(() => {\n        navigate(`/${networkConfig.network === 'mainnet' ? 'testnet' : 'mainnet'}`)\n    }, [networkConfig.network, navigate])\n\n    return <NetworkSwitcherWrapper>\n        testnet&nbsp;<Switch onChange={toggleNetwork} checked={networkConfig.network === 'mainnet'} checkedIcon={false} uncheckedIcon={false} />&nbsp;mainnet\n    </NetworkSwitcherWrapper>\n}","import { FunctionComponent, MouseEventHandler } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, LIGHT_TEXT, WHACKY_ACCENT_2 } from \"../../constants\";\nimport { useError } from \"../../hooks\";\nimport { RemoveButton } from \"../Button\";\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 20px 40px;\n    min-width: 300px;\n    max-width: 90%;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    background: ${WHACKY_ACCENT_2};\n    border: 1px solid ${DARK_BG};\n    color: ${LIGHT_TEXT};\n    border-bottom: none;\n    font-weight: bold;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    position: absolute;\n    top: 1rem;\n    right: 10px;\n    font-size: 1rem;\n`\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n`\n\nexport interface ErrorPopupProps {\n    \n}\n\nexport const ErrorPopup: FunctionComponent<ErrorPopupProps> = () => {\n    const [error, setError] = useError()\n\n    const closePopup: MouseEventHandler<HTMLElement> = (e) => {\n        e.stopPropagation()\n        setError()\n    }\n\n    if (!error) {\n        return <></>\n    }\n\n    return <Overlay onClick={closePopup}>\n        <Wrapper onClick={(e) => e.stopPropagation()}>\n            <CloseButton onClick={closePopup} />\n            {error}\n        </Wrapper>\n    </Overlay>\n}","import './App.css';\nimport { BrowserRouter, Navigate, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { AssetTypeConfig, PageWrapper } from './components/Page';\nimport { H1 } from './components/Headers';\nimport { LoginManager } from './components/Login';\nimport { ContractConfig } from './components/ContractConfig';\nimport { useEffect } from 'react';\nimport { useWalletConnect, WalletConnectContextProvider } from '@provenanceio/walletconnect-js';\nimport { WalletContextProvider } from '@provenanceio/wallet-lib';\nimport { useSetNetwork, useNetworkConfig } from './hooks';\nimport { NetworkSwitcher } from './components/NetworkSwitcher';\nimport { TransactionHandler } from './components/TransactionHandler';\nimport { ErrorPopup } from './components/Popup';\n\nfunction App() {\n  const networkConfig = useNetworkConfig()\n\n  return <WalletConnectContextProvider network={networkConfig.network}>\n      <WalletContextProvider \n        grpcServiceAddress={networkConfig.grpcUrl}\n        walletUrl={networkConfig.walletUrl}>\n        <BrowserRouter basename='frontend-asset-classification'>\n          <Routes>\n            <Route path=\"/:network\" element={<AppContent />} />\n            <Route path=\"*\" element={<Navigate to=\"/testnet\" />} />\n          </Routes>\n        </BrowserRouter>\n      </WalletContextProvider>\n    </WalletConnectContextProvider>\n}\n\nfunction AppContent() {\n  const location = useLocation()\n  const { network } = useParams()\n  const setNetwork = useSetNetwork()\n  const { walletConnectService: wcs } = useWalletConnect()\n  useEffect(() => {\n    wcs.setNetwork(network || 'mainnet')\n    setNetwork(network)\n  }, [location, network, setNetwork, wcs])\n\n  return (\n    <PageWrapper>\n      <H1>Asset Classification Contract</H1>\n      <LoginManager />\n      <ContractConfig />\n      <Routes>\n        <Route path=\"/\" element={<AssetTypeConfig />} />\n      </Routes>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <NetworkSwitcher />\n      </div>\n      <TransactionHandler />\n      <ErrorPopup />\n    </PageWrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { FunctionComponent, PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { DARK_BG, TRANSPARENT_DARK_BG, WHITE } from \"../../constants\";\nimport { RemoveButton } from \"../Button\";\n\nconst ModalOverlay = styled.div`\n    background: ${TRANSPARENT_DARK_BG};\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 100;\n`\n\nconst ModalContainer = styled.div`\n    padding: 20px;\n    border: 1px solid ${DARK_BG};\n    background: ${WHITE};\n    border-radius: 10px;\n    min-width: min(1200px, 90%);\n    max-width: 90%;\n    max-height: 90%;\n    overflow-y: scroll;\n    position: relative;\n`\n\nconst CloseButton = styled(RemoveButton)`\n    font-size: 1rem;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 101;\n`\n\ninterface ModalProps {\n    closeable?: boolean,\n    requestClose: () => any\n}\n\nexport const Modal: FunctionComponent<PropsWithChildren<ModalProps>> = ({ children, requestClose, closeable = true }) => {\n    return <ModalOverlay onClick={requestClose}>\n        <ModalContainer onClick={(e) => e.stopPropagation()}>\n            {closeable && <CloseButton onClick={requestClose} />}\n            {children}\n        </ModalContainer>\n    </ModalOverlay>\n}","// const RICH_BLACK_FOGRA_29 = '#001011ff';\nconst RICH_BLACK = '#093a3eff';\n// const VERDIGRIS = '#3aafb9ff';\nconst ELECTRIC_BLUE = '#64e9eeff';\nconst PALE_CERULEAN = '#97c8ebff';\nconst LIGHT_BLUE = '#BED7DA'\nconst CULTURED_GRAY = '#F0F6F6'\nconst YELLOW_ORANGE = '#F3A738'\nconst PUMPKIN = '#FE7F2D'\n\nexport const WHITE = '#FFF'\n\nexport const LIGHT_BG = CULTURED_GRAY\nexport const DARK_BG = RICH_BLACK\nexport const DARK_TEXT = RICH_BLACK\nexport const LIGHT_TEXT = CULTURED_GRAY\nexport const PRIMARY_ACCENT = ELECTRIC_BLUE\nexport const PRIMARY_ACCENT_LIGHT = PALE_CERULEAN\nexport const WHACKY_ACCENT = YELLOW_ORANGE\nexport const WHACKY_ACCENT_2 = PUMPKIN\nexport const MEDIUM_BG = LIGHT_BLUE\nexport const TRANSPARENT_DARK_BG = 'rgb(8,58,62, .5)'","export type NetworkOptions = 'mainnet' | 'testnet'\n\nexport const PROD_GRPC_URL = 'https://wallet.provenance.io/proxy'\nexport const TEST_GRPC_URL = 'https://wallet.test.provenance.io/proxy'\n\nexport const PROD_WALLET_URL = 'https://wallet.provenance.io'\nexport const TEST_WALLET_URL = 'https://wallet.test.provenance.io'\n\nexport const networkOrDefault = (network?: string): NetworkOptions => network === 'mainnet' ? 'mainnet' : 'testnet'","export const ROOT_ASSET_CLASSIFICATION_NAME = 'asset'\nexport const TESTNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.pb'\nexport const MAINNET_ASSET_CONTRACT_ALIAS_NAME = 'assetclassificationalias.sc.pb'\nexport const PAYABLE_ASSET_TYPE = 'payable'\n","export const MSG_EXECUTE_CONTRACT_TYPE = '/cosmwasm.wasm.v1.MsgExecuteContract'"],"sourceRoot":""}